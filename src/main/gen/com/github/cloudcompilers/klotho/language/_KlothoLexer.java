/* The following code was generated by JFlex 1.7.0-1 tweaked for IntelliJ platform */

package com.github.cloudcompilers.klotho.language;

import static com.github.cloudcompilers.klotho.language.psi.KlothoTypes.*;
import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.Stack;

/**
 * This class is a scanner generated by <a href="http://www.jflex.de/">JFlex</a> 1.7.0-1 from the
 * specification file
 * <tt>/Users/dave/IdeaProjects/klotho-intellij-plugin/src/main/grammars/_KlothoLexer.flex</tt>
 */
public class _KlothoLexer implements FlexLexer {

    /** This character denotes the end of file */
    public static final int YYEOF = -1;

    /** initial size of the lookahead buffer */
    private static final int ZZ_BUFFERSIZE = 16384;

    /** lexical states */
    public static final int YYINITIAL = 0;

    public static final int multiline_comment = 2;
    public static final int line_comment = 4;
    public static final int raw = 6;
    public static final int annotation_decl = 8;
    public static final int line_content = 10;
    public static final int inline_table = 12;
    public static final int assignment = 14;
    public static final int array = 16;
    public static final int header = 18;
    public static final int capability_name = 20;
    public static final int bin_number = 22;
    public static final int oct_number = 24;
    public static final int hex_number = 26;
    public static final int multiline_string = 28;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l ZZ_LEXSTATE[l+1] is the state
     * in the DFA for the lexical state l at the beginning of a line l is of the form l = 2*k, k a
     * non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
        0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13,
        14, 14
    };

    /**
     * Translates characters to character classes Chosen bits are [11, 6, 4] Total runtime size is
     * 14432 bytes
     */
    public static int ZZ_CMAP(int ch) {
        return ZZ_CMAP_A[
                (ZZ_CMAP_Y[(ZZ_CMAP_Z[ch >> 10] << 6) | ((ch >> 4) & 0x3f)] << 4) | (ch & 0xf)];
    }

    /* The ZZ_CMAP_Z table has 1088 entries */
    static final char ZZ_CMAP_Z[] =
            zzUnpackCMap(
                    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"
                        + "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"
                        + "\32\1\33\1\34\1\35\2\11\1\14\1\36\3\11\1\37\10\11\1\40\1\41\5\14\1\42\1\43"
                        + "\11\11\1\44\2\11\1\45\5\11\1\46\4\11\1\47\1\50\4\11\51\14\1\51\3\14\1\52\1"
                        + "\53\4\14\1\54\12\11\1\55\u0381\11");

    /* The ZZ_CMAP_Y table has 2944 entries */
    static final char ZZ_CMAP_Y[] =
            zzUnpackCMap(
                    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"
                        + "\13\1\15\1\16\1\17\10\1\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\24\12\13\1\25"
                        + "\1\13\1\26\1\25\1\13\1\27\4\1\1\13\1\30\1\31\2\1\2\13\1\30\1\1\1\32\1\25\5"
                        + "\13\1\33\1\34\1\35\1\1\1\36\1\13\1\1\1\37\5\13\1\40\1\41\1\42\1\13\1\30\1"
                        + "\43\1\13\1\44\1\45\1\1\1\13\1\46\4\1\1\13\1\47\4\1\1\50\2\13\1\51\1\1\1\52"
                        + "\1\53\1\25\1\54\1\55\1\56\1\57\1\60\1\61\1\53\1\16\1\62\1\55\1\56\1\63\1\1"
                        + "\1\64\1\65\1\66\1\67\1\22\1\56\1\70\1\1\1\71\1\53\1\72\1\73\1\55\1\56\1\70"
                        + "\1\1\1\61\1\53\1\41\1\74\1\75\1\76\1\77\1\1\1\71\1\65\1\1\1\100\1\36\1\56"
                        + "\1\51\1\1\1\101\1\53\1\1\1\102\1\36\1\56\1\103\1\1\1\60\1\53\1\104\1\100\1"
                        + "\36\1\13\1\105\1\60\1\106\1\53\1\107\1\110\1\111\1\13\1\112\1\113\1\1\1\65"
                        + "\1\1\1\25\2\13\1\114\1\113\1\115\2\1\1\116\1\117\1\120\1\121\1\122\1\123\2"
                        + "\1\1\71\1\1\1\115\1\1\1\124\1\13\1\125\1\1\1\126\7\1\2\13\1\30\1\127\1\115"
                        + "\1\130\1\131\1\132\1\133\1\115\2\13\1\134\2\13\1\135\24\13\1\136\1\137\2\13"
                        + "\1\136\2\13\1\140\1\141\1\14\3\13\1\141\3\13\1\30\2\1\1\13\1\1\5\13\1\142"
                        + "\1\25\45\13\1\143\1\13\1\144\1\30\4\13\1\30\1\145\1\146\1\16\1\13\1\16\1\13"
                        + "\1\16\1\146\1\71\3\13\1\147\1\1\1\150\1\115\2\1\1\115\5\13\1\27\1\151\1\13"
                        + "\1\152\4\13\1\40\1\13\1\153\2\1\1\65\1\13\1\154\1\155\2\13\1\156\1\13\1\77"
                        + "\1\115\2\1\1\13\1\113\3\13\1\155\2\1\2\115\1\157\5\1\1\110\2\13\1\147\1\160"
                        + "\1\115\2\1\1\161\1\13\1\162\1\42\2\13\1\40\1\1\2\13\1\147\1\1\1\163\1\42\1"
                        + "\13\1\154\1\46\5\1\1\164\1\165\14\13\4\1\21\13\1\142\2\13\1\142\1\166\1\13"
                        + "\1\154\3\13\1\167\1\170\1\171\1\125\1\170\1\172\1\1\1\173\2\1\1\174\1\1\1"
                        + "\175\1\1\1\125\6\1\1\176\1\177\1\200\1\201\1\202\3\1\1\203\147\1\2\13\1\153"
                        + "\2\13\1\153\10\13\1\204\1\205\2\13\1\134\3\13\1\206\1\1\1\13\1\113\4\207\4"
                        + "\1\1\127\35\1\1\210\2\1\1\211\1\25\4\13\1\212\1\25\4\13\1\135\1\110\1\13\1"
                        + "\154\1\25\4\13\1\153\1\1\1\13\1\30\3\1\1\13\40\1\133\13\1\40\4\1\135\13\1"
                        + "\40\2\1\10\13\1\125\4\1\2\13\1\154\20\13\1\125\1\13\1\213\1\1\2\13\1\153\1"
                        + "\127\1\13\1\154\4\13\1\40\2\1\1\214\1\215\5\13\1\216\1\13\1\153\1\27\3\1\1"
                        + "\214\1\217\1\13\1\31\1\1\3\13\1\147\1\215\2\13\1\147\1\1\1\115\1\1\1\220\1"
                        + "\42\1\13\1\40\1\13\1\113\1\1\1\13\1\125\1\50\2\13\1\31\1\127\1\115\1\221\1"
                        + "\222\2\13\1\46\1\1\1\223\1\115\1\13\1\224\3\13\1\225\1\226\1\227\1\30\1\66"
                        + "\1\230\1\231\1\207\2\13\1\135\1\40\7\13\1\31\1\115\72\13\1\147\1\13\1\232"
                        + "\2\13\1\156\20\1\26\13\1\154\6\13\1\77\2\1\1\113\1\233\1\56\1\234\1\235\6"
                        + "\13\1\16\1\1\1\161\25\13\1\154\1\1\4\13\1\215\2\13\1\27\2\1\1\156\7\1\1\221"
                        + "\7\13\1\125\1\1\1\115\1\25\1\30\1\25\1\30\1\236\4\13\1\153\1\237\1\240\2\1"
                        + "\1\241\1\13\1\14\1\242\2\154\2\1\7\13\1\30\30\1\1\13\1\125\3\13\1\71\2\1\2"
                        + "\13\1\1\1\13\1\243\2\13\1\40\1\13\1\154\2\13\1\244\3\1\11\13\1\154\1\115\2"
                        + "\13\1\244\1\13\1\156\2\13\1\27\3\13\1\147\11\1\23\13\1\113\1\13\1\40\1\27"
                        + "\11\1\1\245\2\13\1\246\1\13\1\40\1\13\1\113\1\13\1\153\4\1\1\13\1\247\1\13"
                        + "\1\40\1\13\1\77\4\1\3\13\1\250\4\1\1\71\1\251\1\13\1\147\2\1\1\13\1\125\1"
                        + "\13\1\125\2\1\1\124\1\13\1\155\1\1\3\13\1\40\1\13\1\40\1\13\1\31\1\13\1\16"
                        + "\6\1\4\13\1\46\3\1\3\13\1\31\3\13\1\31\60\1\1\161\2\13\1\27\2\1\1\65\1\1\1"
                        + "\161\2\13\2\1\1\13\1\46\1\115\1\161\1\13\1\113\1\65\1\1\2\13\1\252\1\161\2"
                        + "\13\1\31\1\253\1\254\2\1\1\13\1\22\1\156\5\1\1\255\1\256\1\46\2\13\1\153\1"
                        + "\1\1\115\1\73\1\55\1\56\1\70\1\1\1\257\1\16\11\1\3\13\1\155\1\260\1\115\2"
                        + "\1\3\13\1\1\1\261\1\115\12\1\2\13\1\153\2\1\1\262\2\1\3\13\1\1\1\263\1\115"
                        + "\2\1\2\13\1\30\1\1\1\115\3\1\1\13\1\77\1\1\1\115\26\1\4\13\1\115\1\127\34"
                        + "\1\3\13\1\46\20\1\1\56\1\13\1\153\1\1\1\71\1\115\1\1\1\215\1\13\67\1\71\13"
                        + "\1\77\16\1\14\13\1\147\53\1\2\13\1\153\75\1\44\13\1\113\33\1\43\13\1\46\1"
                        + "\13\1\153\1\115\6\1\1\13\1\154\1\1\3\13\1\1\1\147\1\115\1\161\1\264\1\13\67"
                        + "\1\4\13\1\155\1\71\3\1\1\161\4\1\1\71\1\1\76\13\1\125\1\1\57\13\1\31\20\1"
                        + "\1\16\77\1\6\13\1\30\1\125\1\46\1\77\66\1\5\13\1\221\3\13\1\146\1\265\1\266"
                        + "\1\267\3\13\1\270\1\271\1\13\1\272\1\273\1\36\24\13\1\274\1\13\1\36\1\135"
                        + "\1\13\1\135\1\13\1\221\1\13\1\221\1\153\1\13\1\153\1\13\1\56\1\13\1\56\1\13"
                        + "\1\275\3\276\14\13\1\155\3\1\4\13\1\147\1\115\112\1\1\267\1\13\1\277\1\300"
                        + "\1\301\1\302\1\303\1\304\1\305\1\156\1\306\1\156\24\1\55\13\1\113\2\1\103"
                        + "\13\1\155\15\13\1\154\150\13\1\16\25\1\41\13\1\154\36\1");

    /* The ZZ_CMAP_A table has 3184 entries */
    static final char ZZ_CMAP_A[] =
            zzUnpackCMap(
                    "\11\0\1\2\1\4\2\6\1\4\22\0\1\2\1\0\1\7\1\11\3\0\1\3\2\0\1\13\1\14\1\54\1\15"
                        + "\1\17\1\12\1\51\1\35\6\34\2\22\1\47\2\0\1\40\2\0\1\42\6\36\13\23\1\1\10\23"
                        + "\1\41\1\5\1\46\1\0\1\21\1\0\1\31\1\53\2\36\1\27\1\30\1\23\1\45\2\23\1\43\1"
                        + "\32\2\23\1\44\2\23\1\25\1\33\1\24\1\26\2\23\1\52\2\23\1\50\1\0\1\37\7\0\1"
                        + "\6\12\0\1\10\11\0\1\20\12\0\1\20\4\0\1\20\5\0\27\20\1\0\12\20\4\0\14\20\16"
                        + "\0\5\20\7\0\1\20\1\0\1\20\1\0\5\20\1\0\2\20\2\0\4\20\1\0\1\20\6\0\1\20\1\0"
                        + "\3\20\1\0\1\20\1\0\4\20\1\0\23\20\1\0\13\20\10\0\6\20\1\0\26\20\2\0\1\20\6"
                        + "\0\10\20\10\0\13\20\5\0\3\20\15\0\12\16\4\0\6\20\1\0\1\20\17\0\2\20\7\0\2"
                        + "\20\12\16\3\20\2\0\2\20\1\0\16\20\15\0\11\20\13\0\1\20\16\0\12\16\6\20\4\0"
                        + "\2\20\4\0\1\20\5\0\6\20\4\0\1\20\11\0\1\20\3\0\1\20\7\0\11\20\7\0\5\20\1\0"
                        + "\10\20\6\0\26\20\3\0\1\20\2\0\1\20\7\0\12\20\4\0\12\16\1\20\4\0\10\20\2\0"
                        + "\2\20\2\0\26\20\1\0\7\20\1\0\1\20\3\0\4\20\3\0\1\20\20\0\1\20\15\0\2\20\1"
                        + "\0\1\20\5\0\6\20\4\0\2\20\1\0\2\20\1\0\2\20\1\0\2\20\17\0\4\20\1\0\1\20\7"
                        + "\0\12\16\2\0\3\20\20\0\11\20\1\0\2\20\1\0\2\20\1\0\5\20\3\0\1\20\2\0\1\20"
                        + "\30\0\1\20\13\0\10\20\2\0\1\20\3\0\1\20\1\0\6\20\3\0\3\20\1\0\4\20\3\0\2\20"
                        + "\1\0\1\20\1\0\2\20\3\0\2\20\3\0\3\20\3\0\14\20\13\0\10\20\1\0\2\20\10\0\3"
                        + "\20\5\0\1\20\4\0\10\20\1\0\6\20\1\0\5\20\3\0\1\20\3\0\2\20\15\0\13\20\2\0"
                        + "\1\20\6\0\3\20\10\0\1\20\12\0\6\20\5\0\22\20\3\0\10\20\1\0\11\20\1\0\1\20"
                        + "\2\0\7\20\11\0\1\20\1\0\2\20\14\0\12\16\7\0\2\20\1\0\1\20\2\0\2\20\1\0\1\20"
                        + "\2\0\1\20\6\0\4\20\1\0\7\20\1\0\3\20\1\0\1\20\1\0\1\20\2\0\2\20\1\0\4\20\1"
                        + "\0\2\20\11\0\1\20\2\0\5\20\1\0\1\20\11\0\12\16\2\0\14\20\1\0\24\20\13\0\5"
                        + "\20\22\0\7\20\4\0\4\20\3\0\1\20\3\0\2\20\7\0\3\20\4\0\15\20\14\0\1\20\1\0"
                        + "\6\20\1\0\1\20\5\0\1\20\2\0\13\20\1\0\15\20\1\0\4\20\2\0\7\20\1\0\1\20\1\0"
                        + "\4\20\2\0\1\20\1\0\4\20\2\0\7\20\1\0\1\20\1\0\4\20\2\0\16\20\2\0\6\20\2\0"
                        + "\15\20\2\0\1\20\1\10\17\20\1\0\10\20\7\0\15\20\1\0\6\20\23\0\1\20\4\0\1\20"
                        + "\3\0\5\20\2\0\22\20\1\0\1\20\5\0\17\20\1\0\16\20\2\0\5\20\13\0\14\20\13\0"
                        + "\1\20\15\0\7\20\7\0\16\20\15\0\2\20\12\16\3\0\3\20\11\0\4\20\1\0\4\20\3\0"
                        + "\2\20\11\0\10\20\1\0\1\20\1\0\1\20\1\0\1\20\1\0\6\20\1\0\7\20\1\0\1\20\3\0"
                        + "\3\20\1\0\7\20\3\0\4\20\2\0\6\20\4\0\13\10\15\0\2\6\5\0\1\10\17\0\1\10\1\0"
                        + "\1\20\15\0\1\20\2\0\1\20\4\0\1\20\2\0\12\20\1\0\1\20\3\0\5\20\6\0\1\20\1\0"
                        + "\1\20\1\0\1\20\1\0\4\20\1\0\13\20\2\0\4\20\5\0\5\20\4\0\1\20\4\0\2\20\13\0"
                        + "\5\20\6\0\4\20\3\0\2\20\14\0\10\20\7\0\10\20\1\0\7\20\1\0\1\10\4\0\2\20\12"
                        + "\0\5\20\5\0\2\20\3\0\7\20\6\0\3\20\12\16\2\20\13\0\11\20\2\0\27\20\2\0\7\20"
                        + "\1\0\3\20\1\0\4\20\1\0\4\20\2\0\6\20\3\0\1\20\1\0\1\20\2\0\5\20\1\0\12\20"
                        + "\12\16\5\20\1\0\3\20\1\0\10\20\4\0\7\20\3\0\1\20\3\0\2\20\1\0\1\20\3\0\2\20"
                        + "\2\0\5\20\2\0\1\20\1\0\1\20\30\0\3\20\3\0\6\20\2\0\6\20\2\0\6\20\11\0\7\20"
                        + "\4\0\5\20\3\0\5\20\5\0\1\20\1\0\10\20\1\0\5\20\1\0\1\20\1\0\2\20\1\0\2\20"
                        + "\1\0\12\20\6\0\12\20\2\0\6\20\2\0\6\20\2\0\6\20\2\0\3\20\3\0\14\20\1\0\16"
                        + "\20\1\0\2\20\1\0\2\20\1\0\10\20\6\0\4\20\4\0\16\20\2\0\1\20\1\0\14\20\1\0"
                        + "\2\20\3\0\1\20\2\0\4\20\1\0\2\20\12\0\10\20\6\0\6\20\1\0\3\20\1\0\12\20\3"
                        + "\0\1\20\12\0\4\20\13\0\12\16\1\20\1\0\1\20\3\0\7\20\1\0\1\20\1\0\4\20\1\0"
                        + "\17\20\1\0\2\20\14\0\3\20\7\0\4\20\11\0\2\20\1\0\1\20\20\0\4\20\10\0\1\20"
                        + "\13\0\10\20\5\0\3\20\2\0\1\20\2\0\2\20\2\0\4\20\1\0\14\20\1\0\1\20\1\0\7\20"
                        + "\1\0\21\20\1\0\4\20\2\0\10\20\1\0\7\20\1\0\14\20\1\0\4\20\1\0\5\20\1\0\1\20"
                        + "\3\0\14\20\2\0\13\20\1\0\10\20\2\0\22\16\1\0\2\20\1\0\1\20\2\0\1\20\1\0\12"
                        + "\20\1\0\4\20\1\0\1\20\1\0\1\20\6\0\1\20\4\0\1\20\1\0\1\20\1\0\1\20\1\0\3\20"
                        + "\1\0\2\20\1\0\1\20\2\0\1\20\1\0\1\20\1\0\1\20\1\0\1\20\1\0\1\20\1\0\2\20\1"
                        + "\0\1\20\2\0\4\20\1\0\7\20\1\0\4\20\1\0\4\20\1\0\1\20\1\0\12\20\1\0\5\20\1"
                        + "\0\3\20\1\0\5\20\1\0\5\20");

    /** Translates DFA states to action switch labels. */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\17\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"
                    + "\1\7\1\10\1\11\1\12\1\1\2\13\1\1\1\14"
                    + "\2\15\1\16\1\17\3\1\1\20\1\1\1\21\1\22"
                    + "\1\23\1\20\1\24\1\25\3\1\1\26\3\1\1\27"
                    + "\1\30\1\26\2\1\1\31\1\32\1\33\1\34\1\35"
                    + "\1\36\2\37\1\40\2\37\1\41\1\42\1\43\1\0"
                    + "\1\44\1\0\1\45\3\0\1\45\1\0\1\20\1\46"
                    + "\1\47\1\50\1\0\1\51\3\0\1\51\1\0\1\26"
                    + "\2\0\1\52\1\53\1\54\3\0\1\40\1\0\1\37"
                    + "\1\0\1\55\1\0\1\45\1\0\1\56\3\0\1\51"
                    + "\1\0\1\57\7\0\1\60\1\0\2\45\2\51\1\61"
                    + "\1\62\2\0\1\63";

    private static int[] zzUnpackAction() {
        int[] result = new int[134];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0; /* index in packed string  */
        int j = offset; /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value;
            while (--count > 0);
        }
        return j;
    }

    /** Translates a state to a row index in the transition table */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\55\0\132\0\207\0\264\0\341\0\u010e\0\u013b"
                    + "\0\u0168\0\u0195\0\u01c2\0\u01ef\0\u021c\0\u0249\0\u0276\0\u02a3"
                    + "\0\u02a3\0\u02d0\0\u02a3\0\u02fd\0\u032a\0\u0357\0\u0384\0\u02a3"
                    + "\0\u02a3\0\u02a3\0\u03b1\0\u032a\0\u02a3\0\u03de\0\u02a3\0\u032a"
                    + "\0\u02a3\0\u040b\0\u0438\0\u0465\0\u0492\0\u04bf\0\u04ec\0\u0519"
                    + "\0\u02a3\0\u02a3\0\u02a3\0\u0546\0\u02a3\0\u02a3\0\u0573\0\u05a0"
                    + "\0\u05cd\0\u05fa\0\u0627\0\u0654\0\u0681\0\u02a3\0\u02a3\0\u06ae"
                    + "\0\u06db\0\u0708\0\u02a3\0\u0735\0\u0762\0\u01ef\0\u021c\0\u0249"
                    + "\0\u078f\0\u07bc\0\u07e9\0\u0816\0\u0843\0\u02a3\0\u0870\0\u02a3"
                    + "\0\u089d\0\u02a3\0\u08ca\0\u08f7\0\u0924\0\u0951\0\u097e\0\u09ab"
                    + "\0\u0519\0\u0519\0\u02a3\0\u02a3\0\u02a3\0\u09d8\0\u0a05\0\u0a32"
                    + "\0\u0a5f\0\u0a8c\0\u0ab9\0\u0627\0\u0627\0\u0ae6\0\u0b13\0\u02a3"
                    + "\0\u02a3\0\u02a3\0\u0b40\0\u0b6d\0\u0b9a\0\u02a3\0\u0bc7\0\u02a3"
                    + "\0\u0bf4\0\u02a3\0\u0c21\0\u02a3\0\u0c4e\0\u02a3\0\u0c7b\0\u0ca8"
                    + "\0\u0cd5\0\u02a3\0\u0d02\0\u02a3\0\u0d2f\0\u0d5c\0\u0d89\0\u0db6"
                    + "\0\u0de3\0\u0e10\0\u0e3d\0\u02a3\0\u0e6a\0\u0c7b\0\u0cd5\0\u0d2f"
                    + "\0\u0d89\0\u02a3\0\u02a3\0\u0e97\0\u0ec4\0\u02a3";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[134];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0; /* index in packed string  */
        int j = offset; /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /** The transition table of the DFA */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\20\1\21\1\22\1\20\1\21\4\20\1\23\1\24"
                    + "\43\20\1\25\1\22\1\20\1\21\4\20\1\26\1\20"
                    + "\1\27\4\20\1\25\2\20\11\25\2\20\1\25\1\30"
                    + "\1\31\1\32\1\33\3\25\4\20\2\25\2\20\1\34"
                    + "\1\22\1\20\1\35\4\20\1\26\6\20\1\25\2\20"
                    + "\11\25\2\20\1\25\1\30\1\31\1\32\1\33\3\25"
                    + "\4\20\2\25\2\20\1\21\1\22\1\20\1\21\51\20"
                    + "\1\21\1\22\1\20\1\21\42\20\1\36\1\37\5\20"
                    + "\1\40\1\22\1\20\1\41\4\20\1\42\6\20\1\25"
                    + "\2\20\11\25\2\20\1\25\1\30\1\31\1\32\1\33"
                    + "\3\25\4\20\2\25\2\20\1\43\1\22\1\44\1\21"
                    + "\2\20\1\45\4\20\2\46\1\47\1\50\1\43\1\20"
                    + "\1\47\11\43\2\47\1\43\1\51\1\52\1\53\1\20"
                    + "\3\43\3\20\1\54\2\43\1\55\1\20\1\56\1\22"
                    + "\1\57\1\56\2\20\1\60\4\20\2\61\1\62\1\63"
                    + "\2\20\1\62\1\20\1\64\3\20\1\65\3\20\2\62"
                    + "\1\20\1\66\1\20\1\53\6\20\1\67\1\70\4\20"
                    + "\1\21\1\22\1\44\1\21\2\20\1\45\4\20\2\46"
                    + "\1\47\1\50\2\20\1\47\1\20\1\71\3\20\1\72"
                    + "\3\20\2\47\3\20\1\53\4\20\1\73\2\20\1\54"
                    + "\2\20\1\55\1\20\1\74\1\22\1\20\1\21\13\20"
                    + "\1\74\2\20\11\74\2\20\1\74\4\20\3\74\1\73"
                    + "\3\20\2\74\1\20\1\0\1\75\16\0\1\75\2\0"
                    + "\11\75\2\0\1\75\4\0\3\75\4\0\2\75\36\0"
                    + "\1\76\13\0\1\76\37\0\2\77\13\0\1\77\21\0"
                    + "\1\100\3\0\1\100\4\0\3\100\2\0\3\100\12\0"
                    + "\1\100\1\0\1\100\1\0\3\101\1\102\1\103\1\104"
                    + "\1\101\1\105\45\101\57\0\1\22\64\0\1\106\1\107"
                    + "\42\0\1\25\13\0\1\25\1\0\1\25\1\0\16\25"
                    + "\4\0\3\25\3\0\3\25\1\0\4\26\1\0\1\26"
                    + "\1\0\46\26\12\0\1\110\105\0\1\111\60\0\1\112"
                    + "\5\0\4\42\1\0\1\42\1\0\46\42\1\0\1\43"
                    + "\13\0\1\43\1\0\1\43\1\0\16\43\4\0\3\43"
                    + "\3\0\3\43\1\0\3\113\1\114\1\0\1\115\47\113"
                    + "\4\116\1\0\1\117\1\116\1\120\45\116\16\0\1\47"
                    + "\1\121\2\0\1\47\11\0\2\47\13\0\1\47\21\0"
                    + "\1\47\1\122\2\0\1\47\11\0\2\47\13\0\1\47"
                    + "\21\0\1\122\3\0\1\122\11\0\2\122\13\0\1\122"
                    + "\21\0\1\47\1\122\2\0\1\47\11\0\2\47\6\0"
                    + "\1\123\4\0\1\47\1\124\1\125\1\0\3\126\1\127"
                    + "\1\0\1\130\47\126\4\131\1\0\1\132\1\131\1\133"
                    + "\45\131\16\0\1\62\1\134\2\0\1\62\11\0\2\62"
                    + "\13\0\1\62\21\0\1\62\1\135\2\0\1\62\11\0"
                    + "\2\62\13\0\1\62\21\0\1\135\3\0\1\135\11\0"
                    + "\2\135\13\0\1\135\30\0\1\136\60\0\1\137\41\0"
                    + "\1\62\1\135\2\0\1\62\11\0\2\62\6\0\1\140"
                    + "\4\0\1\62\1\141\1\142\26\0\1\143\60\0\1\144"
                    + "\24\0\1\74\13\0\1\74\1\0\1\74\1\0\16\74"
                    + "\4\0\3\74\3\0\3\74\2\0\1\75\17\0\16\75"
                    + "\4\0\3\75\3\0\3\75\1\0\3\101\3\0\1\101"
                    + "\1\0\45\101\3\0\1\145\53\0\1\103\1\0\1\103"
                    + "\1\0\1\103\1\0\1\103\1\146\1\147\1\146\44\0"
                    + "\1\150\3\0\1\150\54\0\1\151\60\0\1\152\73\0"
                    + "\1\153\22\0\3\113\1\154\1\0\1\155\47\113\3\0"
                    + "\1\156\51\0\4\157\1\0\50\157\4\116\1\0\1\160"
                    + "\1\116\1\154\45\116\4\161\1\0\50\161\7\0\1\156"
                    + "\45\0\3\126\1\162\1\0\1\163\47\126\3\0\1\164"
                    + "\51\0\4\165\1\0\50\165\4\131\1\0\1\166\1\131"
                    + "\1\162\45\131\4\167\1\0\50\167\7\0\1\164\73\0"
                    + "\1\170\60\0\1\171\50\0\1\172\60\0\1\173\25\0"
                    + "\1\174\63\0\1\146\51\0\1\174\111\0\1\175\10\0"
                    + "\3\113\1\176\1\0\1\155\52\113\1\154\1\0\1\115"
                    + "\47\113\4\116\1\0\1\160\1\116\1\177\51\116\1\0"
                    + "\1\117\1\116\1\154\45\116\3\126\1\200\1\0\1\163"
                    + "\52\126\1\162\1\0\1\130\47\126\4\131\1\0\1\166"
                    + "\1\131\1\201\51\131\1\0\1\132\1\131\1\162\45\131"
                    + "\27\0\1\202\60\0\1\170\50\0\1\203\60\0\1\172"
                    + "\45\0\1\204\75\0\1\205\53\0\1\206\10\0";

    private static int[] zzUnpackTrans() {
        int[] result = new int[3825];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0; /* index in packed string  */
        int j = offset; /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value;
            while (--count > 0);
        }
        return j;
    }

    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String[] ZZ_ERROR_MSG = {
        "Unknown internal scanner error",
        "Error: could not match input",
        "Error: pushback value was too large"
    };

    /** ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code> */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\17\0\2\11\1\1\1\11\4\1\3\11\2\1\1\11"
                    + "\1\1\1\11\1\1\1\11\7\1\3\11\1\1\2\11"
                    + "\7\1\2\11\3\1\1\11\12\1\1\11\1\1\1\11"
                    + "\1\0\1\11\1\0\1\1\3\0\1\1\1\0\1\1"
                    + "\3\11\1\0\1\1\3\0\1\1\1\0\1\1\2\0"
                    + "\3\11\3\0\1\11\1\0\1\11\1\0\1\11\1\0"
                    + "\1\11\1\0\1\11\3\0\1\11\1\0\1\11\7\0"
                    + "\1\11\1\0\4\1\2\11\2\0\1\11";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[134];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0; /* index in packed string  */
        int j = offset; /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value;
            while (--count > 0);
        }
        return j;
    }

    /** the input device */
    private java.io.Reader zzReader;

    /** the current state of the DFA */
    private int zzState;

    /** the current lexical state */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is the source of the yytext() string
     */
    private CharSequence zzBuffer = "";

    /** the textposition at the last accepting state */
    private int zzMarkedPos;

    /** the current text position in the buffer */
    private int zzCurrentPos;

    /** startRead marks the beginning of the yytext() string in the buffer */
    private int zzStartRead;

    /** endRead marks the last character in the buffer, that has been read from input */
    private int zzEndRead;

    /** zzAtBOL == true <=> the scanner is currently at the beginning of a line */
    private boolean zzAtBOL = true;

    /** zzAtEOF == true <=> the scanner is at the EOF */
    private boolean zzAtEOF;

    /** denotes if the user-EOF-code has already been executed */
    private boolean zzEOFDone;

    /* user code: */
    public _KlothoLexer() {
        this((java.io.Reader) null);
    }

    private Stack<Integer> stack = new Stack<Integer>();
    private boolean inAnnotation = false;
    private Character currentQuoteType = null;

    public void yypushState(int newState) {
        stack.push(yystate());
        yybegin(newState);
    }

    public void yypopState() {
        yybegin(stack.pop());
    }

    public void yyresetState(int newState) {
        stack.clear();
        yybegin(newState);
    }

    public char yycurrentChar() {
        return yycharat(zzCurrentPos - zzStartRead);
    }

    public char yyrelativeChar(int offset) {
        return yycharat(zzCurrentPos - zzStartRead + offset);
    }

    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    public _KlothoLexer(java.io.Reader in) {
        this.zzReader = in;
    }

    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        int size = 0;
        for (int i = 0, length = packed.length(); i < length; i += 2) {
            size += packed.charAt(i);
        }
        char[] map = new char[size];
        int i = 0; /* index in packed string  */
        int j = 0; /* index in unpacked array */
        while (i < packed.length()) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do map[j++] = value;
            while (--count > 0);
        }
        return map;
    }

    public final int getTokenStart() {
        return zzStartRead;
    }

    public final int getTokenEnd() {
        return getTokenStart() + yylength();
    }

    public void reset(CharSequence buffer, int start, int end, int initialState) {
        zzBuffer = buffer;
        zzCurrentPos = zzMarkedPos = zzStartRead = start;
        zzAtEOF = false;
        zzAtBOL = true;
        zzEndRead = end;
        yybegin(initialState);
    }

    /**
     * Refills the input buffer.
     *
     * @return <code>false</code>, iff there was new input.
     * @exception java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {
        return true;
    }

    /** Returns the current lexical state. */
    public final int yystate() {
        return zzLexicalState;
    }

    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }

    /** Returns the text matched by the current regular expression. */
    public final CharSequence yytext() {
        return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
    }

    /**
     * Returns the character at position <tt>pos</tt> from the matched text.
     *
     * <p>It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch. A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer.charAt(zzStartRead + pos);
    }

    /** Returns the length of the matched text region. */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }

    /**
     * Reports an error that occured while scanning.
     *
     * <p>In a wellformed scanner (no or only correct usage of yypushback(int) and a match-all
     * fallback rule) this method will only be called with things that "Can't Possibly Happen". If
     * this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
     * scanner etc.).
     *
     * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }

    /**
     * Pushes the specified amount of characters back into the input stream.
     *
     * <p>They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again. This number must not be greater than
     *     yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength()) zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }

    /**
     * Resumes scanning until the next regular expression is matched, the end of input is
     * encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @exception java.io.IOException if any I/O-Error occurs
     */
    public IElementType advance() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        CharSequence zzBufferL = zzBuffer;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }

            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL /*, zzEndReadL*/);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput =
                                    Character.codePointAt(
                                            zzBufferL, zzCurrentPosL /*, zzEndReadL*/);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + ZZ_CMAP(zzInput)];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }
                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                return null;
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1:
                        {
                            return inAnnotation ? BAD_CHARACTER : PLAINTEXT;
                        }
                        // fall through
                    case 52:
                        break;
                    case 2:
                        {
                            return EOL;
                        }
                        // fall through
                    case 53:
                        break;
                    case 3:
                        {
                            return WHITE_SPACE;
                        }
                        // fall through
                    case 54:
                        break;
                    case 4:
                        {
                            yypushState(line_comment);
                            return PY_COMMENT;
                        }
                        // fall through
                    case 55:
                        break;
                    case 5:
                        {
                            return inAnnotation ? ID : PLAINTEXT;
                        }
                        // fall through
                    case 56:
                        break;
                    case 6:
                        {
                            return TOML_COMMENT;
                        }
                        // fall through
                    case 57:
                        break;
                    case 7:
                        {
                            if (inAnnotation) {
                                yypushState(line_content);
                            }
                            return STAR;
                        }
                        // fall through
                    case 58:
                        break;
                    case 8:
                        {
                            boolean wasInAnnotation = inAnnotation;
                            inAnnotation = false;
                            return wasInAnnotation ? RIGHT_BRACE : PLAINTEXT;
                        }
                        // fall through
                    case 59:
                        break;
                    case 9:
                        {
                            if (inAnnotation) {
                                yypushState(assignment);
                                return EQ;
                            }
                            return PLAINTEXT;
                        }
                        // fall through
                    case 60:
                        break;
                    case 10:
                        {
                            if (inAnnotation) {
                                yypushState(header);
                                return LEFT_BRACKET;
                            }
                            return PLAINTEXT;
                        }
                        // fall through
                    case 61:
                        break;
                    case 11:
                        {
                            yyresetState(YYINITIAL);
                            return EOL;
                        }
                        // fall through
                    case 62:
                        break;
                    case 12:
                        {
                            yypopState();
                            inAnnotation = true;
                            return LEFT_BRACE;
                        }
                        // fall through
                    case 63:
                        break;
                    case 13:
                        {
                            yypopState();
                            return EOL;
                        }
                        // fall through
                    case 64:
                        break;
                    case 14:
                        {
                            return inAnnotation ? TOML_COMMENT : PLAINTEXT;
                        }
                        // fall through
                    case 65:
                        break;
                    case 15:
                        {
                            return ID;
                        }
                        // fall through
                    case 66:
                        break;
                    case 16:
                        {
                            return PLAIN_NUMBER;
                        }
                        // fall through
                    case 67:
                        break;
                    case 17:
                        {
                            yypopState();
                            yypopState();
                            return RIGHT_BRACE;
                        }
                        // fall through
                    case 68:
                        break;
                    case 18:
                        {
                            return EQ;
                        }
                        // fall through
                    case 69:
                        break;
                    case 19:
                        {
                            yypushState(array);
                            return LEFT_BRACKET;
                        }
                        // fall through
                    case 70:
                        break;
                    case 20:
                        {
                            return COMMA;
                        }
                        // fall through
                    case 71:
                        break;
                    case 21:
                        {
                            yypopState();
                            switch (yystate()) {
                                case line_comment:
                                    {
                                        yyresetState(YYINITIAL);
                                        break;
                                    }
                                case line_content:
                                    {
                                        yypopState();
                                        break;
                                    }
                            }
                            return EOL;
                        }
                        // fall through
                    case 72:
                        break;
                    case 22:
                        {
                            yypopState();
                            return PLAIN_NUMBER;
                        }
                        // fall through
                    case 73:
                        break;
                    case 23:
                        {
                            inAnnotation = false;
                            return RIGHT_BRACE;
                        }
                        // fall through
                    case 74:
                        break;
                    case 24:
                        {
                            yypushState(inline_table);
                            return LEFT_BRACE;
                        }
                        // fall through
                    case 75:
                        break;
                    case 25:
                        {
                            yypopState();
                            return RIGHT_BRACKET;
                        }
                        // fall through
                    case 76:
                        break;
                    case 26:
                        {
                            return HEADER_ID;
                        }
                        // fall through
                    case 77:
                        break;
                    case 27:
                        {
                            yypopState();
                            return CAPABILITY;
                        }
                        // fall through
                    case 78:
                        break;
                    case 28:
                        {
                            yypopState();
                            return DIG0_1;
                        }
                        // fall through
                    case 79:
                        break;
                    case 29:
                        {
                            yypopState();
                            return DIG0_7;
                        }
                        // fall through
                    case 80:
                        break;
                    case 30:
                        {
                            yypopState();
                            return HEX_DIG;
                        }
                        // fall through
                    case 81:
                        break;
                    case 31:
                        {
                            return MULTILINE_STRING_CONTENT;
                        }
                        // fall through
                    case 82:
                        break;
                    case 32:
                        {
                            return MULTILINE_LINE_SEPARATOR;
                        }
                        // fall through
                    case 83:
                        break;
                    case 33:
                        {
                            yypushState(line_comment);
                            return C_LINE_COMMENT;
                        }
                        // fall through
                    case 84:
                        break;
                    case 34:
                        {
                            yypushState(multiline_comment);
                            return MULTILINE_COMMENT_START;
                        }
                        // fall through
                    case 85:
                        break;
                    case 35:
                        {
                            yyresetState(YYINITIAL);
                            return MULTILINE_COMMENT_END;
                        }
                        // fall through
                    case 86:
                        break;
                    case 36:
                        {
                            yypushState(capability_name);
                            return SEPARATOR;
                        }
                        // fall through
                    case 87:
                        break;
                    case 37:
                        {
                            return STRING;
                        }
                        // fall through
                    case 88:
                        break;
                    case 38:
                        {
                            yypushState(oct_number);
                            return OCT_PREFIX;
                        }
                        // fall through
                    case 89:
                        break;
                    case 39:
                        {
                            yypushState(hex_number);
                            return HEX_PREFIX;
                        }
                        // fall through
                    case 90:
                        break;
                    case 40:
                        {
                            yypushState(bin_number);
                            return BIN_PREFIX;
                        }
                        // fall through
                    case 91:
                        break;
                    case 41:
                        {
                            yypopState();
                            return STRING;
                        }
                        // fall through
                    case 92:
                        break;
                    case 42:
                        {
                            yybegin(oct_number);
                            return OCT_PREFIX;
                        }
                        // fall through
                    case 93:
                        break;
                    case 43:
                        {
                            yybegin(hex_number);
                            return HEX_PREFIX;
                        }
                        // fall through
                    case 94:
                        break;
                    case 44:
                        {
                            yybegin(bin_number);
                            return BIN_PREFIX;
                        }
                        // fall through
                    case 95:
                        break;
                    case 45:
                        {
                            yypushState(multiline_comment);
                            return JSDOC_COMMENT_START;
                        }
                        // fall through
                    case 96:
                        break;
                    case 46:
                        {
                            return TRIPLE_QUOTE;
                        }
                        // fall through
                    case 97:
                        break;
                    case 47:
                        {
                            currentQuoteType = yycurrentChar();
                            yybegin(multiline_string);
                            return TRIPLE_QUOTE;
                        }
                        // fall through
                    case 98:
                        break;
                    case 48:
                        {
                            if (currentQuoteType.equals(yycurrentChar())) {
                                yypopState();
                                return TRIPLE_QUOTE;
                            }
                            return MULTILINE_STRING_CONTENT;
                        }
                        // fall through
                    case 99:
                        break;
                    case 49:
                        {
                            yypopState();
                            return BOOLEAN;
                        }
                        // fall through
                    case 100:
                        break;
                    case 50:
                        {
                            return BOOLEAN;
                        }
                        // fall through
                    case 101:
                        break;
                    case 51:
                        {
                            yypushState(annotation_decl);
                            return ANNOTATION;
                        }
                        // fall through
                    case 102:
                        break;
                    default:
                        zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }
}
