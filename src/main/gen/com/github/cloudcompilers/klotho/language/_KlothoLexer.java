/* The following code was generated by JFlex 1.7.0-1 tweaked for IntelliJ platform */

package com.github.cloudcompilers.klotho.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.github.cloudcompilers.klotho.language.psi.KlothoTypes.*;

import java.util.Stack;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-1
 * from the specification file <tt>/Users/dave/IdeaProjects/klotho-intellij-plugin/src/main/grammars/_KlothoLexer.flex</tt>
 */
public class _KlothoLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int multiline_comment = 2;
  public static final int line_comment = 4;
  public static final int raw = 6;
  public static final int annotation_decl = 8;
  public static final int line_content = 10;
  public static final int inline_table = 12;
  public static final int assignment = 14;
  public static final int array = 16;
  public static final int header = 18;
  public static final int capability_name = 20;
  public static final int bin_number = 22;
  public static final int oct_number = 24;
  public static final int hex_number = 26;
  public static final int multiline_string = 28;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 14432 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\2\11\1\14\1\36\3\11\1\37\10\11\1\40\1\41\5\14\1\42\1\43"+
    "\11\11\1\44\2\11\1\45\5\11\1\46\4\11\1\47\1\50\4\11\51\14\1\51\3\14\1\52\1"+
    "\53\4\14\1\54\12\11\1\55\u0381\11");

  /* The ZZ_CMAP_Y table has 2944 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\10\1\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\24\12\13\1\25"+
    "\1\13\1\26\1\25\1\13\1\27\4\1\1\13\1\30\1\31\2\1\2\13\1\30\1\1\1\32\1\25\5"+
    "\13\1\33\1\34\1\35\1\1\1\36\1\13\1\1\1\37\5\13\1\40\1\41\1\42\1\13\1\30\1"+
    "\43\1\13\1\44\1\45\1\1\1\13\1\46\4\1\1\13\1\47\4\1\1\50\2\13\1\51\1\1\1\52"+
    "\1\53\1\25\1\54\1\55\1\56\1\57\1\60\1\61\1\53\1\16\1\62\1\55\1\56\1\63\1\1"+
    "\1\64\1\65\1\66\1\67\1\22\1\56\1\70\1\1\1\71\1\53\1\72\1\73\1\55\1\56\1\70"+
    "\1\1\1\61\1\53\1\41\1\74\1\75\1\76\1\77\1\1\1\71\1\65\1\1\1\100\1\36\1\56"+
    "\1\51\1\1\1\101\1\53\1\1\1\102\1\36\1\56\1\103\1\1\1\60\1\53\1\104\1\100\1"+
    "\36\1\13\1\105\1\60\1\106\1\53\1\107\1\110\1\111\1\13\1\112\1\113\1\1\1\65"+
    "\1\1\1\25\2\13\1\114\1\113\1\115\2\1\1\116\1\117\1\120\1\121\1\122\1\123\2"+
    "\1\1\71\1\1\1\115\1\1\1\124\1\13\1\125\1\1\1\126\7\1\2\13\1\30\1\127\1\115"+
    "\1\130\1\131\1\132\1\133\1\115\2\13\1\134\2\13\1\135\24\13\1\136\1\137\2\13"+
    "\1\136\2\13\1\140\1\141\1\14\3\13\1\141\3\13\1\30\2\1\1\13\1\1\5\13\1\142"+
    "\1\25\45\13\1\143\1\13\1\144\1\30\4\13\1\30\1\145\1\146\1\16\1\13\1\16\1\13"+
    "\1\16\1\146\1\71\3\13\1\147\1\1\1\150\1\115\2\1\1\115\5\13\1\27\1\151\1\13"+
    "\1\152\4\13\1\40\1\13\1\153\2\1\1\65\1\13\1\154\1\155\2\13\1\156\1\13\1\77"+
    "\1\115\2\1\1\13\1\113\3\13\1\155\2\1\2\115\1\157\5\1\1\110\2\13\1\147\1\160"+
    "\1\115\2\1\1\161\1\13\1\162\1\42\2\13\1\40\1\1\2\13\1\147\1\1\1\163\1\42\1"+
    "\13\1\154\1\46\5\1\1\164\1\165\14\13\4\1\21\13\1\142\2\13\1\142\1\166\1\13"+
    "\1\154\3\13\1\167\1\170\1\171\1\125\1\170\1\172\1\1\1\173\2\1\1\174\1\1\1"+
    "\175\1\1\1\125\6\1\1\176\1\177\1\200\1\201\1\202\3\1\1\203\147\1\2\13\1\153"+
    "\2\13\1\153\10\13\1\204\1\205\2\13\1\134\3\13\1\206\1\1\1\13\1\113\4\207\4"+
    "\1\1\127\35\1\1\210\2\1\1\211\1\25\4\13\1\212\1\25\4\13\1\135\1\110\1\13\1"+
    "\154\1\25\4\13\1\153\1\1\1\13\1\30\3\1\1\13\40\1\133\13\1\40\4\1\135\13\1"+
    "\40\2\1\10\13\1\125\4\1\2\13\1\154\20\13\1\125\1\13\1\213\1\1\2\13\1\153\1"+
    "\127\1\13\1\154\4\13\1\40\2\1\1\214\1\215\5\13\1\216\1\13\1\153\1\27\3\1\1"+
    "\214\1\217\1\13\1\31\1\1\3\13\1\147\1\215\2\13\1\147\1\1\1\115\1\1\1\220\1"+
    "\42\1\13\1\40\1\13\1\113\1\1\1\13\1\125\1\50\2\13\1\31\1\127\1\115\1\221\1"+
    "\222\2\13\1\46\1\1\1\223\1\115\1\13\1\224\3\13\1\225\1\226\1\227\1\30\1\66"+
    "\1\230\1\231\1\207\2\13\1\135\1\40\7\13\1\31\1\115\72\13\1\147\1\13\1\232"+
    "\2\13\1\156\20\1\26\13\1\154\6\13\1\77\2\1\1\113\1\233\1\56\1\234\1\235\6"+
    "\13\1\16\1\1\1\161\25\13\1\154\1\1\4\13\1\215\2\13\1\27\2\1\1\156\7\1\1\221"+
    "\7\13\1\125\1\1\1\115\1\25\1\30\1\25\1\30\1\236\4\13\1\153\1\237\1\240\2\1"+
    "\1\241\1\13\1\14\1\242\2\154\2\1\7\13\1\30\30\1\1\13\1\125\3\13\1\71\2\1\2"+
    "\13\1\1\1\13\1\243\2\13\1\40\1\13\1\154\2\13\1\244\3\1\11\13\1\154\1\115\2"+
    "\13\1\244\1\13\1\156\2\13\1\27\3\13\1\147\11\1\23\13\1\113\1\13\1\40\1\27"+
    "\11\1\1\245\2\13\1\246\1\13\1\40\1\13\1\113\1\13\1\153\4\1\1\13\1\247\1\13"+
    "\1\40\1\13\1\77\4\1\3\13\1\250\4\1\1\71\1\251\1\13\1\147\2\1\1\13\1\125\1"+
    "\13\1\125\2\1\1\124\1\13\1\155\1\1\3\13\1\40\1\13\1\40\1\13\1\31\1\13\1\16"+
    "\6\1\4\13\1\46\3\1\3\13\1\31\3\13\1\31\60\1\1\161\2\13\1\27\2\1\1\65\1\1\1"+
    "\161\2\13\2\1\1\13\1\46\1\115\1\161\1\13\1\113\1\65\1\1\2\13\1\252\1\161\2"+
    "\13\1\31\1\253\1\254\2\1\1\13\1\22\1\156\5\1\1\255\1\256\1\46\2\13\1\153\1"+
    "\1\1\115\1\73\1\55\1\56\1\70\1\1\1\257\1\16\11\1\3\13\1\155\1\260\1\115\2"+
    "\1\3\13\1\1\1\261\1\115\12\1\2\13\1\153\2\1\1\262\2\1\3\13\1\1\1\263\1\115"+
    "\2\1\2\13\1\30\1\1\1\115\3\1\1\13\1\77\1\1\1\115\26\1\4\13\1\115\1\127\34"+
    "\1\3\13\1\46\20\1\1\56\1\13\1\153\1\1\1\71\1\115\1\1\1\215\1\13\67\1\71\13"+
    "\1\77\16\1\14\13\1\147\53\1\2\13\1\153\75\1\44\13\1\113\33\1\43\13\1\46\1"+
    "\13\1\153\1\115\6\1\1\13\1\154\1\1\3\13\1\1\1\147\1\115\1\161\1\264\1\13\67"+
    "\1\4\13\1\155\1\71\3\1\1\161\4\1\1\71\1\1\76\13\1\125\1\1\57\13\1\31\20\1"+
    "\1\16\77\1\6\13\1\30\1\125\1\46\1\77\66\1\5\13\1\221\3\13\1\146\1\265\1\266"+
    "\1\267\3\13\1\270\1\271\1\13\1\272\1\273\1\36\24\13\1\274\1\13\1\36\1\135"+
    "\1\13\1\135\1\13\1\221\1\13\1\221\1\153\1\13\1\153\1\13\1\56\1\13\1\56\1\13"+
    "\1\275\3\276\14\13\1\155\3\1\4\13\1\147\1\115\112\1\1\267\1\13\1\277\1\300"+
    "\1\301\1\302\1\303\1\304\1\305\1\156\1\306\1\156\24\1\55\13\1\113\2\1\103"+
    "\13\1\155\15\13\1\154\150\13\1\16\25\1\41\13\1\154\36\1");

  /* The ZZ_CMAP_A table has 3184 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\1\4\2\6\1\4\22\0\1\37\1\0\1\7\1\11\3\0\1\3\2\0\1\13\1\14\1\57\1"+
    "\15\1\17\1\12\1\54\1\35\6\34\2\22\1\41\2\0\1\44\2\0\1\46\6\36\13\23\1\1\1"+
    "\23\1\40\5\23\1\42\1\45\1\5\1\52\1\0\1\21\1\0\1\31\1\56\2\36\1\27\1\30\1\23"+
    "\1\51\2\23\1\47\1\32\2\23\1\50\2\23\1\25\1\33\1\24\1\26\2\23\1\55\2\23\1\53"+
    "\1\0\1\43\7\0\1\6\12\0\1\10\11\0\1\20\12\0\1\20\4\0\1\20\5\0\27\20\1\0\12"+
    "\20\4\0\14\20\16\0\5\20\7\0\1\20\1\0\1\20\1\0\5\20\1\0\2\20\2\0\4\20\1\0\1"+
    "\20\6\0\1\20\1\0\3\20\1\0\1\20\1\0\4\20\1\0\23\20\1\0\13\20\10\0\6\20\1\0"+
    "\26\20\2\0\1\20\6\0\10\20\10\0\13\20\5\0\3\20\15\0\12\16\4\0\6\20\1\0\1\20"+
    "\17\0\2\20\7\0\2\20\12\16\3\20\2\0\2\20\1\0\16\20\15\0\11\20\13\0\1\20\16"+
    "\0\12\16\6\20\4\0\2\20\4\0\1\20\5\0\6\20\4\0\1\20\11\0\1\20\3\0\1\20\7\0\11"+
    "\20\7\0\5\20\1\0\10\20\6\0\26\20\3\0\1\20\2\0\1\20\7\0\12\20\4\0\12\16\1\20"+
    "\4\0\10\20\2\0\2\20\2\0\26\20\1\0\7\20\1\0\1\20\3\0\4\20\3\0\1\20\20\0\1\20"+
    "\15\0\2\20\1\0\1\20\5\0\6\20\4\0\2\20\1\0\2\20\1\0\2\20\1\0\2\20\17\0\4\20"+
    "\1\0\1\20\7\0\12\16\2\0\3\20\20\0\11\20\1\0\2\20\1\0\2\20\1\0\5\20\3\0\1\20"+
    "\2\0\1\20\30\0\1\20\13\0\10\20\2\0\1\20\3\0\1\20\1\0\6\20\3\0\3\20\1\0\4\20"+
    "\3\0\2\20\1\0\1\20\1\0\2\20\3\0\2\20\3\0\3\20\3\0\14\20\13\0\10\20\1\0\2\20"+
    "\10\0\3\20\5\0\1\20\4\0\10\20\1\0\6\20\1\0\5\20\3\0\1\20\3\0\2\20\15\0\13"+
    "\20\2\0\1\20\6\0\3\20\10\0\1\20\12\0\6\20\5\0\22\20\3\0\10\20\1\0\11\20\1"+
    "\0\1\20\2\0\7\20\11\0\1\20\1\0\2\20\14\0\12\16\7\0\2\20\1\0\1\20\2\0\2\20"+
    "\1\0\1\20\2\0\1\20\6\0\4\20\1\0\7\20\1\0\3\20\1\0\1\20\1\0\1\20\2\0\2\20\1"+
    "\0\4\20\1\0\2\20\11\0\1\20\2\0\5\20\1\0\1\20\11\0\12\16\2\0\14\20\1\0\24\20"+
    "\13\0\5\20\22\0\7\20\4\0\4\20\3\0\1\20\3\0\2\20\7\0\3\20\4\0\15\20\14\0\1"+
    "\20\1\0\6\20\1\0\1\20\5\0\1\20\2\0\13\20\1\0\15\20\1\0\4\20\2\0\7\20\1\0\1"+
    "\20\1\0\4\20\2\0\1\20\1\0\4\20\2\0\7\20\1\0\1\20\1\0\4\20\2\0\16\20\2\0\6"+
    "\20\2\0\15\20\2\0\1\20\1\10\17\20\1\0\10\20\7\0\15\20\1\0\6\20\23\0\1\20\4"+
    "\0\1\20\3\0\5\20\2\0\22\20\1\0\1\20\5\0\17\20\1\0\16\20\2\0\5\20\13\0\14\20"+
    "\13\0\1\20\15\0\7\20\7\0\16\20\15\0\2\20\12\16\3\0\3\20\11\0\4\20\1\0\4\20"+
    "\3\0\2\20\11\0\10\20\1\0\1\20\1\0\1\20\1\0\1\20\1\0\6\20\1\0\7\20\1\0\1\20"+
    "\3\0\3\20\1\0\7\20\3\0\4\20\2\0\6\20\4\0\13\10\15\0\2\6\5\0\1\10\17\0\1\10"+
    "\1\0\1\20\15\0\1\20\2\0\1\20\4\0\1\20\2\0\12\20\1\0\1\20\3\0\5\20\6\0\1\20"+
    "\1\0\1\20\1\0\1\20\1\0\4\20\1\0\13\20\2\0\4\20\5\0\5\20\4\0\1\20\4\0\2\20"+
    "\13\0\5\20\6\0\4\20\3\0\2\20\14\0\10\20\7\0\10\20\1\0\7\20\1\0\1\10\4\0\2"+
    "\20\12\0\5\20\5\0\2\20\3\0\7\20\6\0\3\20\12\16\2\20\13\0\11\20\2\0\27\20\2"+
    "\0\7\20\1\0\3\20\1\0\4\20\1\0\4\20\2\0\6\20\3\0\1\20\1\0\1\20\2\0\5\20\1\0"+
    "\12\20\12\16\5\20\1\0\3\20\1\0\10\20\4\0\7\20\3\0\1\20\3\0\2\20\1\0\1\20\3"+
    "\0\2\20\2\0\5\20\2\0\1\20\1\0\1\20\30\0\3\20\3\0\6\20\2\0\6\20\2\0\6\20\11"+
    "\0\7\20\4\0\5\20\3\0\5\20\5\0\1\20\1\0\10\20\1\0\5\20\1\0\1\20\1\0\2\20\1"+
    "\0\2\20\1\0\12\20\6\0\12\20\2\0\6\20\2\0\6\20\2\0\6\20\2\0\3\20\3\0\14\20"+
    "\1\0\16\20\1\0\2\20\1\0\2\20\1\0\10\20\6\0\4\20\4\0\16\20\2\0\1\20\1\0\14"+
    "\20\1\0\2\20\3\0\1\20\2\0\4\20\1\0\2\20\12\0\10\20\6\0\6\20\1\0\3\20\1\0\12"+
    "\20\3\0\1\20\12\0\4\20\13\0\12\16\1\20\1\0\1\20\3\0\7\20\1\0\1\20\1\0\4\20"+
    "\1\0\17\20\1\0\2\20\14\0\3\20\7\0\4\20\11\0\2\20\1\0\1\20\20\0\4\20\10\0\1"+
    "\20\13\0\10\20\5\0\3\20\2\0\1\20\2\0\2\20\2\0\4\20\1\0\14\20\1\0\1\20\1\0"+
    "\7\20\1\0\21\20\1\0\4\20\2\0\10\20\1\0\7\20\1\0\14\20\1\0\4\20\1\0\5\20\1"+
    "\0\1\20\3\0\14\20\2\0\13\20\1\0\10\20\2\0\22\16\1\0\2\20\1\0\1\20\2\0\1\20"+
    "\1\0\12\20\1\0\4\20\1\0\1\20\1\0\1\20\6\0\1\20\4\0\1\20\1\0\1\20\1\0\1\20"+
    "\1\0\3\20\1\0\2\20\1\0\1\20\2\0\1\20\1\0\1\20\1\0\1\20\1\0\1\20\1\0\1\20\1"+
    "\0\2\20\1\0\1\20\2\0\4\20\1\0\7\20\1\0\4\20\1\0\4\20\1\0\1\20\1\0\12\20\1"+
    "\0\5\20\1\0\3\20\1\0\5\20\1\0\5\20");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\17\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\1\2\13\1\1\1\14"+
    "\2\15\1\16\1\17\3\1\1\20\1\1\1\21\1\22"+
    "\1\23\1\20\1\24\1\25\3\1\1\26\3\1\1\27"+
    "\1\30\1\26\2\1\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\2\37\1\40\2\37\1\41\1\42\1\43\1\0"+
    "\1\44\1\0\1\45\3\0\1\45\1\20\1\0\2\20"+
    "\1\46\1\47\1\50\1\0\1\51\3\0\1\51\1\26"+
    "\1\0\2\26\2\0\1\52\1\53\1\54\3\0\1\40"+
    "\1\0\1\37\1\0\1\55\1\0\1\45\1\0\1\56"+
    "\3\0\1\20\1\0\1\51\1\0\1\57\3\0\1\26"+
    "\5\0\1\60\1\0\2\45\1\20\1\0\2\51\1\26"+
    "\1\0\1\61\1\62\12\0\1\63\5\0\1\64\1\0"+
    "\1\65\4\0\1\66\1\64\1\67\1\65\20\0\1\70"+
    "\1\71\2\0\1\72\2\0\1\73\1\0\1\70\1\0"+
    "\1\71\6\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[204];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\360\0\u0120\0\u0150"+
    "\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270\0\u02a0\0\u02d0"+
    "\0\u02d0\0\u0300\0\u02d0\0\u0330\0\u0360\0\u0390\0\u03c0\0\u02d0"+
    "\0\u02d0\0\u02d0\0\u03f0\0\u0360\0\u02d0\0\u0420\0\u02d0\0\u0360"+
    "\0\u02d0\0\u0450\0\u0480\0\u04b0\0\u04e0\0\u0510\0\u0540\0\u0570"+
    "\0\u02d0\0\u02d0\0\u02d0\0\u05a0\0\u02d0\0\u02d0\0\u05d0\0\u0600"+
    "\0\u0630\0\u0660\0\u0690\0\u06c0\0\u06f0\0\u02d0\0\u02d0\0\u0720"+
    "\0\u0750\0\u0780\0\u02d0\0\u07b0\0\u07e0\0\u0210\0\u0240\0\u0270"+
    "\0\u0810\0\u0840\0\u0870\0\u08a0\0\u08d0\0\u02d0\0\u0900\0\u02d0"+
    "\0\u0930\0\u02d0\0\u0960\0\u0990\0\u09c0\0\u09f0\0\u0a20\0\u0a50"+
    "\0\u0a80\0\u0570\0\u0ab0\0\u0570\0\u02d0\0\u02d0\0\u02d0\0\u0ae0"+
    "\0\u0b10\0\u0b40\0\u0b70\0\u0ba0\0\u0bd0\0\u0c00\0\u0690\0\u0c30"+
    "\0\u0690\0\u0c60\0\u0c90\0\u02d0\0\u02d0\0\u02d0\0\u0cc0\0\u0cf0"+
    "\0\u0d20\0\u02d0\0\u0d50\0\u02d0\0\u0d80\0\u02d0\0\u0db0\0\u02d0"+
    "\0\u0de0\0\u02d0\0\u0e10\0\u0e40\0\u0e70\0\u0ea0\0\u0ed0\0\u02d0"+
    "\0\u0f00\0\u02d0\0\u0f30\0\u0f60\0\u0f90\0\u0fc0\0\u0ff0\0\u1020"+
    "\0\u1050\0\u1080\0\u10b0\0\u02d0\0\u10e0\0\u0e10\0\u0e70\0\u1110"+
    "\0\u1140\0\u0f30\0\u0f90\0\u1170\0\u11a0\0\u02d0\0\u02d0\0\u11d0"+
    "\0\u1200\0\u1230\0\u1260\0\u1290\0\u12c0\0\u12f0\0\u1320\0\u1350"+
    "\0\u1380\0\u02d0\0\u13b0\0\u13e0\0\u1410\0\u1440\0\u1470\0\u14a0"+
    "\0\u14d0\0\u1500\0\u1530\0\u1560\0\u1590\0\u15c0\0\u15f0\0\u1560"+
    "\0\u1620\0\u15c0\0\u1650\0\u1680\0\u16b0\0\u16e0\0\u1710\0\u1740"+
    "\0\u1770\0\u17a0\0\u17d0\0\u1800\0\u1830\0\u1860\0\u1890\0\u18c0"+
    "\0\u18f0\0\u1920\0\u1950\0\u1980\0\u19b0\0\u19e0\0\u02d0\0\u1a10"+
    "\0\u1a40\0\u02d0\0\u1a70\0\u1aa0\0\u1ad0\0\u1b00\0\u1b30\0\u1b60"+
    "\0\u1b90\0\u1bc0\0\u1bf0\0\u1c20";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[204];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\20\1\21\1\22\1\20\1\21\4\20\1\23\1\24"+
    "\24\20\1\22\21\20\1\25\1\22\1\20\1\21\4\20"+
    "\1\26\1\20\1\27\4\20\1\25\2\20\11\25\2\20"+
    "\1\25\1\22\1\25\1\20\1\25\1\30\1\31\1\32"+
    "\1\33\3\25\3\20\2\25\2\20\1\34\1\22\1\20"+
    "\1\35\4\20\1\26\6\20\1\25\2\20\11\25\2\20"+
    "\1\25\1\22\1\25\1\20\1\25\1\30\1\31\1\32"+
    "\1\33\3\25\3\20\2\25\2\20\1\21\1\22\1\20"+
    "\1\21\32\20\1\22\21\20\1\21\1\22\1\20\1\21"+
    "\32\20\1\22\1\20\1\36\11\20\1\37\5\20\1\40"+
    "\1\22\1\20\1\41\4\20\1\42\6\20\1\25\2\20"+
    "\11\25\2\20\1\25\1\22\1\25\1\20\1\25\1\30"+
    "\1\31\1\32\1\33\3\25\3\20\2\25\2\20\1\43"+
    "\1\22\1\44\1\21\2\20\1\45\4\20\2\46\1\47"+
    "\1\50\1\43\1\20\1\47\11\43\2\47\1\43\1\22"+
    "\1\43\1\20\1\43\1\51\1\52\1\53\1\20\3\43"+
    "\2\20\1\54\2\43\1\55\1\20\1\56\1\22\1\57"+
    "\1\56\2\20\1\60\4\20\2\61\1\62\1\63\2\20"+
    "\1\62\1\20\1\64\3\20\1\65\3\20\2\62\1\20"+
    "\1\22\3\20\1\66\1\20\1\53\5\20\1\67\1\70"+
    "\4\20\1\21\1\22\1\44\1\21\2\20\1\45\4\20"+
    "\2\46\1\47\1\50\2\20\1\47\1\20\1\71\3\20"+
    "\1\72\3\20\2\47\1\20\1\22\5\20\1\53\4\20"+
    "\1\73\1\20\1\54\2\20\1\55\1\20\1\74\1\22"+
    "\1\20\1\21\13\20\1\74\2\20\11\74\2\20\1\74"+
    "\1\22\1\74\1\20\1\74\4\20\3\74\1\73\2\20"+
    "\2\74\1\20\1\0\1\75\16\0\1\75\2\0\11\75"+
    "\2\0\1\75\1\0\1\75\1\0\1\75\4\0\3\75"+
    "\3\0\2\75\36\0\1\76\16\0\1\76\37\0\2\77"+
    "\16\0\1\77\21\0\1\100\3\0\1\100\4\0\3\100"+
    "\2\0\3\100\15\0\1\100\1\0\1\100\1\0\3\101"+
    "\1\102\1\103\1\104\1\101\1\105\50\101\62\0\1\22"+
    "\34\0\1\22\32\0\1\106\1\107\45\0\1\25\13\0"+
    "\1\25\1\0\1\25\1\0\16\25\1\0\1\25\1\0"+
    "\1\25\4\0\3\25\2\0\3\25\1\0\4\26\1\0"+
    "\1\26\1\0\51\26\12\0\1\110\114\0\1\111\51\0"+
    "\1\112\16\0\4\42\1\0\1\42\1\0\51\42\1\0"+
    "\1\43\13\0\1\43\1\0\1\43\1\0\16\43\1\0"+
    "\1\43\1\0\1\43\4\0\3\43\2\0\3\43\1\0"+
    "\3\113\1\114\1\0\1\115\52\113\4\116\1\0\1\117"+
    "\1\116\1\120\50\116\16\0\1\121\1\122\2\0\1\121"+
    "\11\0\2\121\16\0\1\121\21\0\1\123\1\124\2\0"+
    "\1\123\11\0\2\123\16\0\1\123\21\0\1\124\3\0"+
    "\1\124\11\0\2\124\16\0\1\124\21\0\1\123\1\124"+
    "\2\0\1\123\11\0\2\123\12\0\1\125\3\0\1\123"+
    "\1\126\1\127\1\0\3\130\1\131\1\0\1\132\52\130"+
    "\4\133\1\0\1\134\1\133\1\135\50\133\16\0\1\136"+
    "\1\137\2\0\1\136\11\0\2\136\16\0\1\136\21\0"+
    "\1\140\1\141\2\0\1\140\11\0\2\140\16\0\1\140"+
    "\21\0\1\141\3\0\1\141\11\0\2\141\16\0\1\141"+
    "\30\0\1\142\63\0\1\143\44\0\1\140\1\141\2\0"+
    "\1\140\11\0\2\140\12\0\1\144\3\0\1\140\1\145"+
    "\1\146\26\0\1\147\63\0\1\150\27\0\1\74\13\0"+
    "\1\74\1\0\1\74\1\0\16\74\1\0\1\74\1\0"+
    "\1\74\4\0\3\74\2\0\3\74\2\0\1\75\17\0"+
    "\16\75\1\0\1\75\1\0\1\75\4\0\3\75\2\0"+
    "\3\75\1\0\3\101\3\0\1\101\1\0\50\101\3\0"+
    "\1\151\56\0\1\103\1\0\1\103\1\0\1\103\1\0"+
    "\1\103\1\152\1\153\1\152\23\0\1\103\23\0\1\154"+
    "\3\0\1\154\57\0\1\155\63\0\1\156\76\0\1\157"+
    "\25\0\3\113\1\160\1\0\1\161\52\113\3\0\1\162"+
    "\54\0\4\163\1\0\53\163\4\116\1\0\1\164\1\116"+
    "\1\160\50\116\4\165\1\0\53\165\7\0\1\162\66\0"+
    "\1\121\1\124\2\0\1\121\11\0\2\121\16\0\1\121"+
    "\21\0\1\166\1\124\2\0\1\166\11\0\2\166\3\0"+
    "\1\167\12\0\1\166\3\0\3\130\1\170\1\0\1\171"+
    "\52\130\3\0\1\172\54\0\4\173\1\0\53\173\4\133"+
    "\1\0\1\174\1\133\1\170\50\133\4\175\1\0\53\175"+
    "\7\0\1\172\66\0\1\136\1\141\2\0\1\136\11\0"+
    "\2\136\16\0\1\136\21\0\1\176\1\141\2\0\1\176"+
    "\11\0\2\176\3\0\1\177\12\0\1\176\31\0\1\200"+
    "\63\0\1\201\53\0\1\202\63\0\1\203\30\0\1\204"+
    "\66\0\1\152\54\0\1\204\120\0\1\205\7\0\3\113"+
    "\1\206\1\0\1\161\55\113\1\160\1\0\1\115\52\113"+
    "\4\116\1\0\1\164\1\116\1\207\54\116\1\0\1\117"+
    "\1\116\1\160\50\116\16\0\1\210\1\124\2\0\1\210"+
    "\11\0\2\210\16\0\1\210\21\0\1\211\3\0\1\211"+
    "\11\0\2\211\16\0\1\211\3\0\3\130\1\212\1\0"+
    "\1\171\55\130\1\170\1\0\1\132\52\130\4\133\1\0"+
    "\1\174\1\133\1\213\54\133\1\0\1\134\1\133\1\170"+
    "\50\133\16\0\1\214\1\141\2\0\1\214\11\0\2\214"+
    "\16\0\1\214\21\0\1\215\3\0\1\215\11\0\2\215"+
    "\16\0\1\215\32\0\1\216\63\0\1\200\53\0\1\217"+
    "\63\0\1\202\50\0\1\220\50\0\1\221\1\121\1\124"+
    "\2\0\1\121\11\0\2\121\16\0\1\121\21\0\1\222"+
    "\3\0\1\222\11\0\2\222\16\0\1\222\20\0\1\223"+
    "\1\136\1\141\2\0\1\136\11\0\2\136\16\0\1\136"+
    "\21\0\1\224\3\0\1\224\11\0\2\224\16\0\1\224"+
    "\54\0\1\225\24\0\1\226\3\0\1\226\11\0\2\226"+
    "\16\0\1\226\44\0\1\227\34\0\1\230\3\0\1\230"+
    "\11\0\2\230\16\0\1\230\44\0\1\231\66\0\1\232"+
    "\25\0\1\233\3\0\1\233\11\0\2\233\16\0\1\233"+
    "\21\0\1\234\3\0\1\234\11\0\2\234\16\0\1\234"+
    "\21\0\1\235\3\0\1\235\11\0\2\235\16\0\1\235"+
    "\21\0\1\236\3\0\1\236\11\0\2\236\16\0\1\236"+
    "\20\0\1\237\60\0\1\240\3\0\1\240\11\0\2\240"+
    "\16\0\1\240\20\0\1\241\60\0\1\242\3\0\1\242"+
    "\11\0\2\242\16\0\1\242\21\0\1\243\3\0\1\243"+
    "\11\0\2\243\16\0\1\243\22\0\1\244\56\0\1\245"+
    "\3\0\1\245\11\0\2\245\16\0\1\245\22\0\1\246"+
    "\56\0\1\247\3\0\1\247\11\0\2\247\16\0\1\247"+
    "\21\0\1\250\3\0\1\250\11\0\2\250\16\0\1\250"+
    "\21\0\1\251\3\0\1\251\11\0\2\251\16\0\1\251"+
    "\21\0\1\252\3\0\1\252\11\0\2\252\16\0\1\252"+
    "\42\0\2\253\56\0\2\254\35\0\1\255\3\0\1\255"+
    "\11\0\2\255\16\0\1\255\21\0\1\256\3\0\1\256"+
    "\11\0\2\256\16\0\1\256\21\0\1\257\3\0\1\257"+
    "\11\0\2\257\16\0\1\257\21\0\1\260\3\0\1\260"+
    "\11\0\2\260\16\0\1\260\44\0\1\261\57\0\1\262"+
    "\34\0\1\263\3\0\1\263\11\0\2\263\16\0\1\263"+
    "\21\0\1\264\3\0\1\264\11\0\2\264\16\0\1\264"+
    "\21\0\1\265\3\0\1\265\11\0\2\265\16\0\1\265"+
    "\21\0\1\266\3\0\1\266\11\0\2\266\16\0\1\266"+
    "\44\0\1\267\57\0\1\270\34\0\1\271\3\0\1\271"+
    "\11\0\2\271\16\0\1\271\21\0\1\272\3\0\1\272"+
    "\11\0\2\272\16\0\1\272\21\0\1\273\3\0\1\273"+
    "\11\0\2\273\16\0\1\273\21\0\1\274\3\0\1\274"+
    "\11\0\2\274\16\0\1\274\20\0\1\275\1\0\1\276"+
    "\22\0\1\277\32\0\1\300\1\0\1\301\22\0\1\302"+
    "\33\0\1\303\3\0\1\303\11\0\2\303\16\0\1\303"+
    "\21\0\1\304\3\0\1\304\11\0\2\304\16\0\1\304"+
    "\21\0\1\305\3\0\1\305\11\0\2\305\16\0\1\305"+
    "\21\0\1\306\3\0\1\306\11\0\2\306\16\0\1\306"+
    "\21\0\1\307\3\0\1\307\11\0\2\307\16\0\1\307"+
    "\20\0\1\275\1\304\3\0\1\304\11\0\2\304\4\0"+
    "\1\277\11\0\1\304\21\0\1\310\3\0\1\310\11\0"+
    "\2\310\16\0\1\310\20\0\1\300\1\306\3\0\1\306"+
    "\11\0\2\306\4\0\1\302\11\0\1\306\44\0\1\311"+
    "\57\0\1\312\34\0\1\313\3\0\1\313\11\0\2\313"+
    "\16\0\1\313\21\0\1\314\3\0\1\314\11\0\2\314"+
    "\16\0\1\314\21\0\1\277\3\0\1\277\11\0\2\277"+
    "\16\0\1\277\21\0\1\302\3\0\1\302\11\0\2\302"+
    "\16\0\1\302\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7248];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\17\0\2\11\1\1\1\11\4\1\3\11\2\1\1\11"+
    "\1\1\1\11\1\1\1\11\7\1\3\11\1\1\2\11"+
    "\7\1\2\11\3\1\1\11\12\1\1\11\1\1\1\11"+
    "\1\0\1\11\1\0\1\1\3\0\2\1\1\0\2\1"+
    "\3\11\1\0\1\1\3\0\2\1\1\0\2\1\2\0"+
    "\3\11\3\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\3\0\1\1\1\0\1\11\1\0"+
    "\1\11\3\0\1\1\5\0\1\11\1\0\3\1\1\0"+
    "\3\1\1\0\2\11\12\0\1\11\5\0\1\1\1\0"+
    "\1\1\4\0\4\1\20\0\2\1\2\0\1\11\2\0"+
    "\1\11\1\0\1\1\1\0\1\1\6\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[204];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _KlothoLexer() {
    this((java.io.Reader)null);
  }

  private Stack<Integer> stack = new Stack<Integer>();
  private boolean inAnnotation = false;
  private Character currentQuoteType = null;

  public void yypushState(int newState) {
    stack.push(yystate());
    yybegin(newState);
  }

  public void yypopState() {
    yybegin(stack.pop());
  }

  public void yyresetState(int newState) {
      stack.clear();
      yybegin(newState);
  }

  public char yycurrentChar() {
      return yycharat(zzCurrentPos-zzStartRead);
  }

  public char yyrelativeChar(int offset) {
      return yycharat(zzCurrentPos-zzStartRead+offset);
  }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _KlothoLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return inAnnotation ? BAD_CHARACTER : PLAINTEXT;
            } 
            // fall through
          case 60: break;
          case 2: 
            { return EOL;
            } 
            // fall through
          case 61: break;
          case 3: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 62: break;
          case 4: 
            { yypushState(line_comment); return PY_COMMENT;
            } 
            // fall through
          case 63: break;
          case 5: 
            { return inAnnotation ? ID : PLAINTEXT;
            } 
            // fall through
          case 64: break;
          case 6: 
            { return TOML_COMMENT;
            } 
            // fall through
          case 65: break;
          case 7: 
            { if (inAnnotation) { yypushState(line_content); } return STAR;
            } 
            // fall through
          case 66: break;
          case 8: 
            { boolean wasInAnnotation = inAnnotation; inAnnotation = false; return wasInAnnotation ? RIGHT_BRACE : PLAINTEXT;
            } 
            // fall through
          case 67: break;
          case 9: 
            { if (inAnnotation) { yypushState(assignment); return EQ; } return PLAINTEXT;
            } 
            // fall through
          case 68: break;
          case 10: 
            { if (inAnnotation) { yypushState(header); return LEFT_BRACKET; } return PLAINTEXT;
            } 
            // fall through
          case 69: break;
          case 11: 
            { yyresetState(YYINITIAL); return EOL;
            } 
            // fall through
          case 70: break;
          case 12: 
            { yypopState(); inAnnotation = true; return LEFT_BRACE;
            } 
            // fall through
          case 71: break;
          case 13: 
            { yypopState(); return EOL;
            } 
            // fall through
          case 72: break;
          case 14: 
            { return inAnnotation ? TOML_COMMENT : PLAINTEXT;
            } 
            // fall through
          case 73: break;
          case 15: 
            { return ID;
            } 
            // fall through
          case 74: break;
          case 16: 
            { return PLAIN_NUMBER;
            } 
            // fall through
          case 75: break;
          case 17: 
            { yypopState(); yypopState(); return RIGHT_BRACE;
            } 
            // fall through
          case 76: break;
          case 18: 
            { return EQ;
            } 
            // fall through
          case 77: break;
          case 19: 
            { yypushState(array); return LEFT_BRACKET;
            } 
            // fall through
          case 78: break;
          case 20: 
            { return COMMA;
            } 
            // fall through
          case 79: break;
          case 21: 
            { yypopState(); switch (yystate()){ case line_comment:{ yyresetState(YYINITIAL); break;} case line_content:{yypopState(); break;}} return EOL;
            } 
            // fall through
          case 80: break;
          case 22: 
            { yypopState(); return PLAIN_NUMBER;
            } 
            // fall through
          case 81: break;
          case 23: 
            { inAnnotation = false; return RIGHT_BRACE;
            } 
            // fall through
          case 82: break;
          case 24: 
            { yypushState(inline_table); return LEFT_BRACE;
            } 
            // fall through
          case 83: break;
          case 25: 
            { yypopState(); return RIGHT_BRACKET;
            } 
            // fall through
          case 84: break;
          case 26: 
            { return HEADER_ID;
            } 
            // fall through
          case 85: break;
          case 27: 
            { yypopState(); return CAPABILITY;
            } 
            // fall through
          case 86: break;
          case 28: 
            { yypopState(); return DIG0_1;
            } 
            // fall through
          case 87: break;
          case 29: 
            { yypopState(); return DIG0_7;
            } 
            // fall through
          case 88: break;
          case 30: 
            { yypopState(); return HEX_DIG;
            } 
            // fall through
          case 89: break;
          case 31: 
            { return MULTILINE_STRING_CONTENT;
            } 
            // fall through
          case 90: break;
          case 32: 
            { return MULTILINE_LINE_SEPARATOR;
            } 
            // fall through
          case 91: break;
          case 33: 
            { yypushState(line_comment); return C_LINE_COMMENT;
            } 
            // fall through
          case 92: break;
          case 34: 
            { yypushState(multiline_comment); return MULTILINE_COMMENT_START;
            } 
            // fall through
          case 93: break;
          case 35: 
            { yyresetState(YYINITIAL); return MULTILINE_COMMENT_END;
            } 
            // fall through
          case 94: break;
          case 36: 
            { yypushState(capability_name); return SEPARATOR;
            } 
            // fall through
          case 95: break;
          case 37: 
            { return STRING;
            } 
            // fall through
          case 96: break;
          case 38: 
            { yypushState(oct_number); return OCT_PREFIX;
            } 
            // fall through
          case 97: break;
          case 39: 
            { yypushState(hex_number); return HEX_PREFIX;
            } 
            // fall through
          case 98: break;
          case 40: 
            { yypushState(bin_number); return BIN_PREFIX;
            } 
            // fall through
          case 99: break;
          case 41: 
            { yypopState(); return STRING;
            } 
            // fall through
          case 100: break;
          case 42: 
            { yybegin(oct_number); return OCT_PREFIX;
            } 
            // fall through
          case 101: break;
          case 43: 
            { yybegin(hex_number); return HEX_PREFIX;
            } 
            // fall through
          case 102: break;
          case 44: 
            { yybegin(bin_number); return BIN_PREFIX;
            } 
            // fall through
          case 103: break;
          case 45: 
            { yypushState(multiline_comment); return JSDOC_COMMENT_START;
            } 
            // fall through
          case 104: break;
          case 46: 
            { currentQuoteType = yycurrentChar(); yypushState(multiline_string); return TRIPLE_QUOTE;
            } 
            // fall through
          case 105: break;
          case 47: 
            { currentQuoteType = yycurrentChar(); yybegin(multiline_string); return TRIPLE_QUOTE;
            } 
            // fall through
          case 106: break;
          case 48: 
            { if (currentQuoteType.equals(yycurrentChar())) { yypopState(); return TRIPLE_QUOTE; } return MULTILINE_STRING_CONTENT;
            } 
            // fall through
          case 107: break;
          case 49: 
            { yypopState(); return BOOLEAN;
            } 
            // fall through
          case 108: break;
          case 50: 
            { return BOOLEAN;
            } 
            // fall through
          case 109: break;
          case 51: 
            { yypushState(annotation_decl); return ANNOTATION;
            } 
            // fall through
          case 110: break;
          case 52: 
            { return LOCAL_TIME;
            } 
            // fall through
          case 111: break;
          case 53: 
            { yypopState(); return LOCAL_TIME;
            } 
            // fall through
          case 112: break;
          case 54: 
            { return LOCAL_DATE;
            } 
            // fall through
          case 113: break;
          case 55: 
            { yypopState(); return LOCAL_DATE;
            } 
            // fall through
          case 114: break;
          case 56: 
            { return LOCAL_DATE_TIME;
            } 
            // fall through
          case 115: break;
          case 57: 
            { yypopState(); return LOCAL_DATE_TIME;
            } 
            // fall through
          case 116: break;
          case 58: 
            { return OFFSET_DATE_TIME;
            } 
            // fall through
          case 117: break;
          case 59: 
            { yypopState(); return OFFSET_DATE_TIME;
            } 
            // fall through
          case 118: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
