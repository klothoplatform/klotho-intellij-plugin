/* The following code was generated by JFlex 1.7.0-1 tweaked for IntelliJ platform */

package com.github.cloudcompilers.klotho.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.github.cloudcompilers.klotho.language.psi.KlothoTypes.*;

// manual imports
import java.util.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-1
 * from the specification file <tt>/Users/dave/IdeaProjects/klotho-intellij-plugin/src/main/grammars/_KlothoLexer.flex</tt>
 */
public class _KlothoLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int multiline_comment = 2;
  public static final int line_comment = 4;
  public static final int raw = 6;
  public static final int annotation_decl = 8;
  public static final int line_content = 10;
  public static final int inline_table = 12;
  public static final int assignment = 14;
  public static final int array = 16;
  public static final int header = 18;
  public static final int capability_name = 20;
  public static final int bin_number = 22;
  public static final int oct_number = 24;
  public static final int hex_number = 26;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 14336 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\2\11\1\14\1\36\3\11\1\37\10\11\1\40\1\41\5\14\1\42\1\43"+
    "\11\11\1\44\2\11\1\45\5\11\1\46\4\11\1\47\1\50\4\11\51\14\1\51\3\14\1\52\1"+
    "\53\4\14\1\54\12\11\1\55\u0381\11");

  /* The ZZ_CMAP_Y table has 2944 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\10\1\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\24\12\13\1\25"+
    "\1\13\1\26\1\25\1\13\1\27\4\1\1\13\1\30\1\31\2\1\2\13\1\30\1\1\1\32\1\25\5"+
    "\13\1\33\1\34\1\35\1\1\1\36\1\13\1\1\1\37\5\13\1\40\1\41\1\42\1\13\1\30\1"+
    "\43\1\13\1\44\1\45\1\1\1\13\1\46\4\1\1\13\1\47\4\1\1\50\2\13\1\51\1\1\1\52"+
    "\1\53\1\25\1\54\1\55\1\56\1\57\1\60\1\61\1\53\1\16\1\62\1\55\1\56\1\63\1\1"+
    "\1\64\1\65\1\66\1\67\1\22\1\56\1\70\1\1\1\71\1\53\1\72\1\73\1\55\1\56\1\70"+
    "\1\1\1\61\1\53\1\41\1\74\1\75\1\76\1\77\1\1\1\71\1\65\1\1\1\100\1\36\1\56"+
    "\1\51\1\1\1\101\1\53\1\1\1\102\1\36\1\56\1\103\1\1\1\60\1\53\1\104\1\100\1"+
    "\36\1\13\1\105\1\60\1\106\1\53\1\107\1\110\1\111\1\13\1\112\1\113\1\1\1\65"+
    "\1\1\1\25\2\13\1\114\1\113\1\115\2\1\1\116\1\117\1\120\1\121\1\122\1\123\2"+
    "\1\1\71\1\1\1\115\1\1\1\124\1\13\1\125\1\1\1\126\7\1\2\13\1\30\1\127\1\115"+
    "\1\130\1\131\1\132\1\133\1\115\2\13\1\134\2\13\1\135\24\13\1\136\1\137\2\13"+
    "\1\136\2\13\1\140\1\141\1\14\3\13\1\141\3\13\1\30\2\1\1\13\1\1\5\13\1\142"+
    "\1\25\45\13\1\143\1\13\1\25\1\30\4\13\1\30\1\144\1\145\1\16\1\13\1\16\1\13"+
    "\1\16\1\145\1\71\3\13\1\146\1\1\1\147\1\115\2\1\1\115\5\13\1\27\1\150\1\13"+
    "\1\151\4\13\1\40\1\13\1\152\2\1\1\65\1\13\1\153\1\154\2\13\1\155\1\13\1\77"+
    "\1\115\2\1\1\13\1\113\3\13\1\154\2\1\2\115\1\156\5\1\1\110\2\13\1\146\1\157"+
    "\1\115\2\1\1\160\1\13\1\161\1\42\2\13\1\40\1\1\2\13\1\146\1\1\1\162\1\42\1"+
    "\13\1\153\1\46\5\1\1\163\1\164\14\13\4\1\21\13\1\142\2\13\1\142\1\165\1\13"+
    "\1\153\3\13\1\166\1\167\1\170\1\125\1\167\2\1\1\171\4\1\1\172\1\1\1\125\6"+
    "\1\1\173\1\174\1\175\1\176\1\177\3\1\1\200\147\1\2\13\1\152\2\13\1\152\10"+
    "\13\1\201\1\202\2\13\1\134\3\13\1\203\1\1\1\13\1\113\4\204\4\1\1\127\35\1"+
    "\1\205\2\1\1\206\1\25\4\13\1\207\1\25\4\13\1\135\1\110\1\13\1\153\1\25\4\13"+
    "\1\152\1\1\1\13\1\30\3\1\1\13\40\1\133\13\1\40\4\1\135\13\1\40\2\1\10\13\1"+
    "\125\4\1\2\13\1\153\20\13\1\125\1\13\1\210\1\1\2\13\1\152\1\127\1\13\1\153"+
    "\4\13\1\40\2\1\1\211\1\212\5\13\1\213\1\13\1\152\1\27\3\1\1\211\1\214\1\13"+
    "\1\31\1\1\3\13\1\146\1\212\2\13\1\146\1\1\1\115\1\1\1\215\1\42\1\13\1\40\1"+
    "\13\1\113\1\1\1\13\1\125\1\50\2\13\1\31\1\127\1\115\1\216\1\217\2\13\1\46"+
    "\1\1\1\220\1\115\1\13\1\221\3\13\1\222\1\223\1\224\1\30\1\66\1\225\1\226\1"+
    "\204\2\13\1\135\1\40\7\13\1\31\1\115\72\13\1\146\1\13\1\227\2\13\1\155\20"+
    "\1\26\13\1\153\6\13\1\77\2\1\1\113\1\230\1\56\1\231\1\232\6\13\1\16\1\1\1"+
    "\160\25\13\1\153\1\1\4\13\1\212\2\13\1\27\2\1\1\155\7\1\1\216\7\13\1\125\1"+
    "\1\1\115\1\25\1\30\1\25\1\30\1\233\4\13\1\152\1\234\1\235\2\1\1\236\1\13\1"+
    "\14\1\237\2\153\2\1\7\13\1\30\30\1\1\13\1\125\3\13\1\71\2\1\2\13\1\1\1\13"+
    "\1\240\2\13\1\40\1\13\1\153\2\13\1\241\3\1\11\13\1\153\1\115\2\13\1\241\1"+
    "\13\1\155\2\13\1\27\3\13\1\146\11\1\23\13\1\113\1\13\1\40\1\27\11\1\1\242"+
    "\2\13\1\243\1\13\1\40\1\13\1\113\1\13\1\152\4\1\1\13\1\244\1\13\1\40\1\13"+
    "\1\77\4\1\3\13\1\245\4\1\1\71\1\246\1\13\1\146\2\1\1\13\1\125\1\13\1\125\2"+
    "\1\1\124\1\13\1\154\1\1\3\13\1\40\1\13\1\40\1\13\1\31\1\13\1\16\6\1\4\13\1"+
    "\46\3\1\3\13\1\31\3\13\1\31\60\1\1\160\2\13\1\27\2\1\1\65\1\1\1\160\2\13\2"+
    "\1\1\13\1\46\1\115\1\160\1\13\1\113\1\65\1\1\2\13\1\247\1\160\2\13\1\31\1"+
    "\250\1\251\2\1\1\13\1\22\1\155\5\1\1\252\1\253\1\46\2\13\1\152\1\1\1\115\1"+
    "\73\1\55\1\56\1\70\1\1\1\254\1\16\11\1\3\13\1\154\1\255\1\115\2\1\3\13\1\1"+
    "\1\256\1\115\12\1\2\13\1\152\2\1\1\257\2\1\3\13\1\1\1\260\1\115\2\1\2\13\1"+
    "\30\1\1\1\115\3\1\1\13\1\77\1\1\1\115\26\1\4\13\1\115\1\127\34\1\3\13\1\46"+
    "\20\1\1\56\1\13\1\152\1\1\1\71\1\115\1\1\1\212\1\13\67\1\71\13\1\77\16\1\14"+
    "\13\1\146\53\1\2\13\1\152\75\1\44\13\1\113\33\1\43\13\1\46\1\13\1\152\1\115"+
    "\6\1\1\13\1\153\1\1\3\13\1\1\1\146\1\115\1\160\1\261\1\13\67\1\4\13\1\154"+
    "\1\71\3\1\1\160\4\1\1\71\1\1\76\13\1\125\1\1\57\13\1\31\20\1\1\16\77\1\6\13"+
    "\1\30\1\125\1\46\1\77\66\1\5\13\1\216\3\13\1\145\1\262\1\263\1\264\3\13\1"+
    "\265\1\266\1\13\1\267\1\270\1\36\24\13\1\271\1\13\1\36\1\135\1\13\1\135\1"+
    "\13\1\216\1\13\1\216\1\152\1\13\1\152\1\13\1\56\1\13\1\56\1\13\1\272\3\273"+
    "\14\13\1\154\3\1\4\13\1\146\1\115\112\1\1\264\1\13\1\274\1\275\1\276\1\277"+
    "\1\300\1\301\1\302\1\155\1\303\1\155\24\1\55\13\1\113\2\1\103\13\1\154\15"+
    "\13\1\153\150\13\1\16\25\1\41\13\1\153\36\1");

  /* The ZZ_CMAP_A table has 3136 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\1\3\2\6\1\3\22\0\1\2\1\0\1\7\1\14\3\0\1\4\2\0\1\22\1\10\1\53\1\11"+
    "\1\13\1\21\1\50\1\34\6\33\2\17\1\46\2\0\1\37\2\0\1\41\6\35\13\20\1\1\10\20"+
    "\1\40\1\5\1\45\1\0\1\16\1\0\1\30\1\52\2\35\1\26\1\27\1\20\1\44\2\20\1\42\1"+
    "\31\2\20\1\43\2\20\1\24\1\32\1\23\1\25\2\20\1\51\2\20\1\47\1\0\1\36\7\0\1"+
    "\6\24\0\1\15\12\0\1\15\4\0\1\15\5\0\27\15\1\0\12\15\4\0\14\15\16\0\5\15\7"+
    "\0\1\15\1\0\1\15\1\0\5\15\1\0\2\15\2\0\4\15\1\0\1\15\6\0\1\15\1\0\3\15\1\0"+
    "\1\15\1\0\4\15\1\0\23\15\1\0\13\15\10\0\6\15\1\0\26\15\2\0\1\15\6\0\10\15"+
    "\10\0\13\15\5\0\3\15\15\0\12\12\4\0\6\15\1\0\1\15\17\0\2\15\7\0\2\15\12\12"+
    "\3\15\2\0\2\15\1\0\16\15\15\0\11\15\13\0\1\15\16\0\12\12\6\15\4\0\2\15\4\0"+
    "\1\15\5\0\6\15\4\0\1\15\11\0\1\15\3\0\1\15\7\0\11\15\7\0\5\15\1\0\10\15\6"+
    "\0\26\15\3\0\1\15\2\0\1\15\7\0\12\15\4\0\12\12\1\15\4\0\10\15\2\0\2\15\2\0"+
    "\26\15\1\0\7\15\1\0\1\15\3\0\4\15\3\0\1\15\20\0\1\15\15\0\2\15\1\0\1\15\5"+
    "\0\6\15\4\0\2\15\1\0\2\15\1\0\2\15\1\0\2\15\17\0\4\15\1\0\1\15\7\0\12\12\2"+
    "\0\3\15\20\0\11\15\1\0\2\15\1\0\2\15\1\0\5\15\3\0\1\15\2\0\1\15\30\0\1\15"+
    "\13\0\10\15\2\0\1\15\3\0\1\15\1\0\6\15\3\0\3\15\1\0\4\15\3\0\2\15\1\0\1\15"+
    "\1\0\2\15\3\0\2\15\3\0\3\15\3\0\14\15\13\0\10\15\1\0\2\15\10\0\3\15\5\0\1"+
    "\15\4\0\10\15\1\0\6\15\1\0\5\15\3\0\1\15\3\0\2\15\15\0\13\15\2\0\1\15\6\0"+
    "\3\15\10\0\1\15\12\0\6\15\5\0\22\15\3\0\10\15\1\0\11\15\1\0\1\15\2\0\7\15"+
    "\11\0\1\15\1\0\2\15\14\0\12\12\7\0\2\15\1\0\1\15\2\0\2\15\1\0\1\15\2\0\1\15"+
    "\6\0\4\15\1\0\7\15\1\0\3\15\1\0\1\15\1\0\1\15\2\0\2\15\1\0\4\15\1\0\2\15\11"+
    "\0\1\15\2\0\5\15\1\0\1\15\11\0\12\12\2\0\14\15\1\0\24\15\13\0\5\15\22\0\7"+
    "\15\4\0\4\15\3\0\1\15\3\0\2\15\7\0\3\15\4\0\15\15\14\0\1\15\1\0\6\15\1\0\1"+
    "\15\5\0\1\15\2\0\13\15\1\0\15\15\1\0\4\15\2\0\7\15\1\0\1\15\1\0\4\15\2\0\1"+
    "\15\1\0\4\15\2\0\7\15\1\0\1\15\1\0\4\15\2\0\16\15\2\0\6\15\2\0\15\15\2\0\1"+
    "\15\1\0\10\15\7\0\15\15\1\0\6\15\23\0\1\15\4\0\1\15\3\0\5\15\2\0\22\15\1\0"+
    "\1\15\5\0\17\15\1\0\16\15\2\0\5\15\13\0\14\15\13\0\1\15\15\0\7\15\7\0\16\15"+
    "\15\0\2\15\12\12\3\0\3\15\11\0\4\15\1\0\4\15\3\0\2\15\11\0\10\15\1\0\1\15"+
    "\1\0\1\15\1\0\1\15\1\0\6\15\1\0\7\15\1\0\1\15\3\0\3\15\1\0\7\15\3\0\4\15\2"+
    "\0\6\15\14\0\2\6\7\0\1\15\15\0\1\15\2\0\1\15\4\0\1\15\2\0\12\15\1\0\1\15\3"+
    "\0\5\15\6\0\1\15\1\0\1\15\1\0\1\15\1\0\4\15\1\0\13\15\2\0\4\15\5\0\5\15\4"+
    "\0\1\15\4\0\2\15\13\0\5\15\6\0\4\15\3\0\2\15\14\0\10\15\7\0\10\15\1\0\7\15"+
    "\6\0\2\15\12\0\5\15\5\0\2\15\3\0\7\15\6\0\3\15\12\12\2\15\13\0\11\15\2\0\27"+
    "\15\2\0\7\15\1\0\3\15\1\0\4\15\1\0\4\15\2\0\6\15\3\0\1\15\1\0\1\15\2\0\5\15"+
    "\1\0\12\15\12\12\5\15\1\0\3\15\1\0\10\15\4\0\7\15\3\0\1\15\3\0\2\15\1\0\1"+
    "\15\3\0\2\15\2\0\5\15\2\0\1\15\1\0\1\15\30\0\3\15\3\0\6\15\2\0\6\15\2\0\6"+
    "\15\11\0\7\15\4\0\5\15\3\0\5\15\5\0\1\15\1\0\10\15\1\0\5\15\1\0\1\15\1\0\2"+
    "\15\1\0\2\15\1\0\12\15\6\0\12\15\2\0\6\15\2\0\6\15\2\0\6\15\2\0\3\15\3\0\14"+
    "\15\1\0\16\15\1\0\2\15\1\0\2\15\1\0\10\15\6\0\4\15\4\0\16\15\2\0\1\15\1\0"+
    "\14\15\1\0\2\15\3\0\1\15\2\0\4\15\1\0\2\15\12\0\10\15\6\0\6\15\1\0\3\15\1"+
    "\0\12\15\3\0\1\15\12\0\4\15\13\0\12\12\1\15\1\0\1\15\3\0\7\15\1\0\1\15\1\0"+
    "\4\15\1\0\17\15\1\0\2\15\14\0\3\15\7\0\4\15\11\0\2\15\1\0\1\15\20\0\4\15\10"+
    "\0\1\15\13\0\10\15\5\0\3\15\2\0\1\15\2\0\2\15\2\0\4\15\1\0\14\15\1\0\1\15"+
    "\1\0\7\15\1\0\21\15\1\0\4\15\2\0\10\15\1\0\7\15\1\0\14\15\1\0\4\15\1\0\5\15"+
    "\1\0\1\15\3\0\14\15\2\0\13\15\1\0\10\15\2\0\22\12\1\0\2\15\1\0\1\15\2\0\1"+
    "\15\1\0\12\15\1\0\4\15\1\0\1\15\1\0\1\15\6\0\1\15\4\0\1\15\1\0\1\15\1\0\1"+
    "\15\1\0\3\15\1\0\2\15\1\0\1\15\2\0\1\15\1\0\1\15\1\0\1\15\1\0\1\15\1\0\1\15"+
    "\1\0\2\15\1\0\1\15\2\0\4\15\1\0\7\15\1\0\4\15\1\0\4\15\1\0\1\15\1\0\12\15"+
    "\1\0\5\15\1\0\3\15\1\0\5\15\1\0\5\15");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\16\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\1\2\13\1\1\1\14"+
    "\2\15\1\16\1\17\3\1\1\20\1\1\1\21\1\22"+
    "\1\23\1\20\1\24\1\25\3\1\1\26\3\1\1\27"+
    "\1\30\1\26\2\1\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\0\1\42\1\0\1\43"+
    "\3\0\1\43\1\0\1\20\1\44\1\45\1\46\1\0"+
    "\1\47\3\0\1\47\1\0\1\26\2\0\1\50\1\51"+
    "\1\52\2\0\1\53\1\0\1\43\5\0\1\47\11\0"+
    "\1\43\2\0\1\43\2\47\1\54\1\55\4\0\2\56"+
    "\1\57";

  private static int [] zzUnpackAction() {
    int [] result = new int[127];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\260\0\334\0\u0108\0\u0134"+
    "\0\u0160\0\u018c\0\u01b8\0\u01e4\0\u0210\0\u023c\0\u0268\0\u0268"+
    "\0\u0294\0\u0268\0\u02c0\0\u02ec\0\u0318\0\u0344\0\u0268\0\u0268"+
    "\0\u0268\0\u0370\0\u02ec\0\u0268\0\u039c\0\u0268\0\u02ec\0\u0268"+
    "\0\u03c8\0\u03f4\0\u0420\0\u044c\0\u0478\0\u04a4\0\u04d0\0\u0268"+
    "\0\u0268\0\u0268\0\u04fc\0\u0268\0\u0268\0\u0528\0\u0554\0\u0580"+
    "\0\u05ac\0\u05d8\0\u0604\0\u0630\0\u0268\0\u0268\0\u065c\0\u0688"+
    "\0\u06b4\0\u0268\0\u06e0\0\u070c\0\u01e4\0\u0210\0\u023c\0\u0268"+
    "\0\u0738\0\u0268\0\u0764\0\u0268\0\u0790\0\u07bc\0\u07e8\0\u0814"+
    "\0\u0840\0\u086c\0\u04d0\0\u04d0\0\u0268\0\u0268\0\u0268\0\u0898"+
    "\0\u07bc\0\u08c4\0\u08f0\0\u091c\0\u086c\0\u05d8\0\u05d8\0\u0948"+
    "\0\u0974\0\u0268\0\u0268\0\u0268\0\u09a0\0\u09cc\0\u0268\0\u09f8"+
    "\0\u0268\0\u0a24\0\u0a50\0\u0a7c\0\u0aa8\0\u0ad4\0\u0268\0\u0b00"+
    "\0\u0b2c\0\u0b58\0\u0b84\0\u0bb0\0\u0bdc\0\u0c08\0\u0c34\0\u0c60"+
    "\0\u0a7c\0\u0c8c\0\u0cb8\0\u0ad4\0\u0b2c\0\u0b84\0\u0268\0\u0268"+
    "\0\u0ce4\0\u0d10\0\u0d3c\0\u0d68\0\u0d10\0\u0d3c\0\u0268";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[127];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\17\1\20\1\21\1\20\10\17\1\22\4\17\1\23"+
    "\33\17\1\24\1\21\1\20\10\17\1\25\1\24\2\17"+
    "\1\24\1\17\1\26\10\24\2\17\1\24\1\27\1\30"+
    "\1\31\1\32\3\24\4\17\2\24\2\17\1\33\1\21"+
    "\1\34\10\17\1\25\1\24\2\17\1\24\2\17\10\24"+
    "\2\17\1\24\1\27\1\30\1\31\1\32\3\24\4\17"+
    "\2\24\2\17\1\20\1\21\1\20\51\17\1\20\1\21"+
    "\1\20\42\17\1\35\1\36\5\17\1\37\1\21\1\40"+
    "\10\17\1\41\1\24\2\17\1\24\2\17\10\24\2\17"+
    "\1\24\1\27\1\30\1\31\1\32\3\24\4\17\2\24"+
    "\2\17\1\42\1\21\1\20\1\43\2\17\1\44\2\45"+
    "\1\46\1\47\1\17\1\42\1\17\1\46\1\42\2\17"+
    "\10\42\2\46\1\42\1\50\1\51\1\52\1\17\3\42"+
    "\3\17\1\53\2\42\1\54\1\17\1\55\1\21\1\55"+
    "\1\56\2\17\1\57\2\60\1\61\1\62\3\17\1\61"+
    "\3\17\1\63\3\17\1\64\3\17\2\61\1\17\1\65"+
    "\1\17\1\52\6\17\1\66\1\67\4\17\1\20\1\21"+
    "\1\20\1\43\2\17\1\44\2\45\1\46\1\47\3\17"+
    "\1\46\3\17\1\70\3\17\1\71\3\17\2\46\3\17"+
    "\1\52\4\17\1\72\2\17\1\53\2\17\1\54\1\17"+
    "\1\73\1\21\1\20\11\17\1\73\2\17\1\73\2\17"+
    "\10\73\2\17\1\73\4\17\3\73\1\72\3\17\2\73"+
    "\1\17\1\0\1\74\13\0\1\74\2\0\1\74\2\0"+
    "\10\74\2\0\1\74\4\0\3\74\4\0\2\74\35\0"+
    "\1\75\13\0\1\75\36\0\2\76\13\0\1\76\15\0"+
    "\1\77\4\0\1\77\6\0\3\77\2\0\3\77\12\0"+
    "\1\77\1\0\1\77\57\0\1\21\72\0\1\100\1\101"+
    "\32\0\1\24\7\0\1\24\1\0\1\24\2\0\3\24"+
    "\2\0\13\24\4\0\3\24\3\0\3\24\1\0\3\25"+
    "\1\0\2\25\1\0\45\25\21\0\1\102\74\0\1\103"+
    "\57\0\1\104\5\0\3\41\1\0\2\41\1\0\45\41"+
    "\1\0\1\42\7\0\1\42\1\0\1\42\2\0\3\42"+
    "\2\0\13\42\4\0\3\42\3\0\3\42\1\0\4\105"+
    "\1\106\1\107\46\105\5\110\1\111\1\110\1\112\44\110"+
    "\12\0\1\46\1\113\3\0\1\46\13\0\2\46\13\0"+
    "\1\46\15\0\1\46\1\114\3\0\1\46\13\0\2\46"+
    "\13\0\1\46\15\0\1\114\4\0\1\114\13\0\2\114"+
    "\13\0\1\114\15\0\1\46\1\114\3\0\1\46\13\0"+
    "\2\46\6\0\1\115\4\0\1\46\1\116\1\117\1\0"+
    "\4\120\1\121\1\122\46\120\5\123\1\124\1\123\1\125"+
    "\44\123\12\0\1\61\1\126\3\0\1\61\13\0\2\61"+
    "\13\0\1\61\15\0\1\61\1\127\3\0\1\61\13\0"+
    "\2\61\13\0\1\61\15\0\1\127\4\0\1\127\13\0"+
    "\2\127\13\0\1\127\27\0\1\130\57\0\1\131\35\0"+
    "\1\61\1\127\3\0\1\61\13\0\2\61\6\0\1\132"+
    "\4\0\1\61\1\133\1\134\25\0\1\135\57\0\1\136"+
    "\24\0\1\73\7\0\1\73\1\0\1\73\2\0\3\73"+
    "\2\0\13\73\4\0\3\73\3\0\3\73\2\0\1\74"+
    "\14\0\3\74\2\0\13\74\4\0\3\74\3\0\3\74"+
    "\23\0\1\137\62\0\1\140\22\0\4\105\1\141\1\142"+
    "\46\105\4\0\1\143\47\0\54\144\5\110\1\145\1\110"+
    "\1\141\44\110\54\146\7\0\1\143\44\0\4\120\1\147"+
    "\1\150\46\120\54\151\5\123\1\152\1\123\1\147\44\123"+
    "\54\153\25\0\1\154\57\0\1\155\47\0\1\156\57\0"+
    "\1\157\65\0\1\160\10\0\4\105\1\161\1\142\46\105"+
    "\4\143\1\162\1\143\1\0\1\163\44\143\4\105\1\141"+
    "\1\107\46\105\5\110\1\145\1\110\1\164\51\110\1\111"+
    "\1\110\1\141\44\110\4\120\1\165\1\150\52\120\1\147"+
    "\1\122\46\120\5\123\1\152\1\123\1\166\51\123\1\124"+
    "\1\123\1\147\44\123\26\0\1\167\57\0\1\154\47\0"+
    "\1\170\57\0\1\156\44\0\1\171\30\0\4\143\1\172"+
    "\1\143\1\0\1\163\50\143\1\162\1\143\1\0\1\173"+
    "\44\143\44\0\1\174\7\0\4\143\1\175\1\143\1\0"+
    "\1\163\50\143\1\162\1\143\1\0\1\176\44\143\43\0"+
    "\1\177\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3476];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\16\0\2\11\1\1\1\11\4\1\3\11\2\1\1\11"+
    "\1\1\1\11\1\1\1\11\7\1\3\11\1\1\2\11"+
    "\7\1\2\11\3\1\1\11\5\1\1\11\1\1\1\11"+
    "\1\0\1\11\1\0\1\1\3\0\1\1\1\0\1\1"+
    "\3\11\1\0\1\1\3\0\1\1\1\0\1\1\2\0"+
    "\3\11\2\0\1\11\1\0\1\11\5\0\1\11\11\0"+
    "\1\1\2\0\3\1\2\11\4\0\2\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[127];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _KlothoLexer() {
    this((java.io.Reader)null);
  }

  private Stack<Integer> stack = new Stack<Integer>();
  private boolean inAnnotation = false;

  public void yypushState(int newState) {
    stack.push(yystate());
    yybegin(newState);
  }

  public void yypopState() {
    yybegin(stack.pop());
  }

  public void yyresetState(int newState) {
      stack.clear();
      yybegin(newState);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _KlothoLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return inAnnotation ? BAD_CHARACTER : PLAINTEXT;
            } 
            // fall through
          case 48: break;
          case 2: 
            { return EOL;
            } 
            // fall through
          case 49: break;
          case 3: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 50: break;
          case 4: 
            { yypushState(line_comment); return PY_COMMENT;
            } 
            // fall through
          case 51: break;
          case 5: 
            { return inAnnotation ? ID : PLAINTEXT;
            } 
            // fall through
          case 52: break;
          case 6: 
            { return TOML_COMMENT;
            } 
            // fall through
          case 53: break;
          case 7: 
            { if (inAnnotation) { yypushState(line_content); } return STAR;
            } 
            // fall through
          case 54: break;
          case 8: 
            { boolean wasInAnnotation = inAnnotation; inAnnotation = false; return wasInAnnotation ? RIGHT_BRACE : PLAINTEXT;
            } 
            // fall through
          case 55: break;
          case 9: 
            { if (inAnnotation) { yypushState(assignment); return EQ; } return PLAINTEXT;
            } 
            // fall through
          case 56: break;
          case 10: 
            { if (inAnnotation) { yypushState(header); return LEFT_BRACKET; } return PLAINTEXT;
            } 
            // fall through
          case 57: break;
          case 11: 
            { yyresetState(YYINITIAL); return EOL;
            } 
            // fall through
          case 58: break;
          case 12: 
            { yypopState(); inAnnotation = true; return LEFT_BRACE;
            } 
            // fall through
          case 59: break;
          case 13: 
            { yypopState(); return EOL;
            } 
            // fall through
          case 60: break;
          case 14: 
            { return inAnnotation ? TOML_COMMENT : PLAINTEXT;
            } 
            // fall through
          case 61: break;
          case 15: 
            { return ID;
            } 
            // fall through
          case 62: break;
          case 16: 
            { return PLAIN_NUMBER;
            } 
            // fall through
          case 63: break;
          case 17: 
            { yypopState(); yypopState(); return RIGHT_BRACE;
            } 
            // fall through
          case 64: break;
          case 18: 
            { return EQ;
            } 
            // fall through
          case 65: break;
          case 19: 
            { yypushState(array); return LEFT_BRACKET;
            } 
            // fall through
          case 66: break;
          case 20: 
            { return COMMA;
            } 
            // fall through
          case 67: break;
          case 21: 
            { yypopState(); switch (yystate()){ case line_comment:{ yyresetState(YYINITIAL); break;} case line_content:{yypopState(); break;}} return EOL;
            } 
            // fall through
          case 68: break;
          case 22: 
            { yypopState(); return PLAIN_NUMBER;
            } 
            // fall through
          case 69: break;
          case 23: 
            { inAnnotation = false; return RIGHT_BRACE;
            } 
            // fall through
          case 70: break;
          case 24: 
            { yypushState(inline_table); return LEFT_BRACE;
            } 
            // fall through
          case 71: break;
          case 25: 
            { yypopState(); return RIGHT_BRACKET;
            } 
            // fall through
          case 72: break;
          case 26: 
            { return HEADER_ID;
            } 
            // fall through
          case 73: break;
          case 27: 
            { yypopState(); return CAPABILITY;
            } 
            // fall through
          case 74: break;
          case 28: 
            { yypopState(); return DIG0_1;
            } 
            // fall through
          case 75: break;
          case 29: 
            { yypopState(); return DIG0_7;
            } 
            // fall through
          case 76: break;
          case 30: 
            { yypopState(); return HEX_DIG;
            } 
            // fall through
          case 77: break;
          case 31: 
            { yypushState(line_comment); return C_LINE_COMMENT;
            } 
            // fall through
          case 78: break;
          case 32: 
            { yypushState(multiline_comment); return MULTILINE_COMMENT_START;
            } 
            // fall through
          case 79: break;
          case 33: 
            { yyresetState(YYINITIAL); return MULTILINE_COMMENT_END;
            } 
            // fall through
          case 80: break;
          case 34: 
            { yypushState(capability_name); return SEPARATOR;
            } 
            // fall through
          case 81: break;
          case 35: 
            { return STRING;
            } 
            // fall through
          case 82: break;
          case 36: 
            { yypushState(oct_number); return OCT_PREFIX;
            } 
            // fall through
          case 83: break;
          case 37: 
            { yypushState(hex_number); return HEX_PREFIX;
            } 
            // fall through
          case 84: break;
          case 38: 
            { yypushState(bin_number); return BIN_PREFIX;
            } 
            // fall through
          case 85: break;
          case 39: 
            { yypopState(); return STRING;
            } 
            // fall through
          case 86: break;
          case 40: 
            { yybegin(oct_number); return OCT_PREFIX;
            } 
            // fall through
          case 87: break;
          case 41: 
            { yybegin(hex_number); return HEX_PREFIX;
            } 
            // fall through
          case 88: break;
          case 42: 
            { yybegin(bin_number); return BIN_PREFIX;
            } 
            // fall through
          case 89: break;
          case 43: 
            { yypushState(multiline_comment); return JSDOC_COMMENT_START;
            } 
            // fall through
          case 90: break;
          case 44: 
            { yypopState(); return BOOLEAN;
            } 
            // fall through
          case 91: break;
          case 45: 
            { return BOOLEAN;
            } 
            // fall through
          case 92: break;
          case 46: 
            { return MULTILINE_STRING;
            } 
            // fall through
          case 93: break;
          case 47: 
            { yypushState(annotation_decl); return ANNOTATION;
            } 
            // fall through
          case 94: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
