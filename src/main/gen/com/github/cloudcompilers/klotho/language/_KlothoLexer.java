/* The following code was generated by JFlex 1.7.0-1 tweaked for IntelliJ platform */

package com.github.cloudcompilers.klotho.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.github.cloudcompilers.klotho.language.psi.KlothoTypes.*;

// manual imports
import java.util.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-1
 * from the specification file <tt>/Users/dave/IdeaProjects/klotho-intellij-plugin/src/main/grammars/_KlothoLexer.flex</tt>
 */
public class _KlothoLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int multiline_comment = 2;
  public static final int line_comment = 4;
  public static final int raw = 6;
  public static final int annotation_decl = 8;
  public static final int line_content = 10;
  public static final int inline_table = 12;
  public static final int capability_name = 14;
  public static final int bin_number = 16;
  public static final int oct_number = 18;
  public static final int hex_number = 20;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 14432 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\2\11\1\14\1\36\3\11\1\37\10\11\1\40\1\41\5\14\1\42\1\43"+
    "\11\11\1\44\2\11\1\45\5\11\1\46\4\11\1\47\1\50\4\11\51\14\1\51\3\14\1\52\1"+
    "\53\4\14\1\54\12\11\1\55\u0381\11");

  /* The ZZ_CMAP_Y table has 2944 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\10\1\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\24\12\13\1\25"+
    "\1\13\1\26\1\25\1\13\1\27\4\1\1\13\1\30\1\31\2\1\2\13\1\30\1\1\1\32\1\25\5"+
    "\13\1\33\1\34\1\35\1\1\1\36\1\13\1\1\1\37\5\13\1\40\1\41\1\42\1\13\1\30\1"+
    "\43\1\13\1\44\1\45\1\1\1\13\1\46\4\1\1\13\1\47\4\1\1\50\2\13\1\51\1\1\1\52"+
    "\1\53\1\25\1\54\1\55\1\56\1\57\1\60\1\61\1\53\1\16\1\62\1\55\1\56\1\63\1\1"+
    "\1\64\1\65\1\66\1\67\1\22\1\56\1\70\1\1\1\71\1\53\1\72\1\73\1\55\1\56\1\70"+
    "\1\1\1\61\1\53\1\41\1\74\1\75\1\76\1\77\1\1\1\71\1\65\1\1\1\100\1\36\1\56"+
    "\1\51\1\1\1\101\1\53\1\1\1\102\1\36\1\56\1\103\1\1\1\60\1\53\1\104\1\100\1"+
    "\36\1\13\1\105\1\60\1\106\1\53\1\107\1\110\1\111\1\13\1\112\1\113\1\1\1\65"+
    "\1\1\1\25\2\13\1\114\1\113\1\115\2\1\1\116\1\117\1\120\1\121\1\122\1\123\2"+
    "\1\1\71\1\1\1\115\1\1\1\124\1\13\1\125\1\1\1\126\7\1\2\13\1\30\1\127\1\115"+
    "\1\130\1\131\1\132\1\133\1\115\2\13\1\134\2\13\1\135\24\13\1\136\1\137\2\13"+
    "\1\136\2\13\1\140\1\141\1\14\3\13\1\141\3\13\1\30\2\1\1\13\1\1\5\13\1\142"+
    "\1\25\45\13\1\143\1\13\1\144\1\30\4\13\1\30\1\145\1\146\1\16\1\13\1\16\1\13"+
    "\1\16\1\146\1\71\3\13\1\147\1\1\1\150\1\115\2\1\1\115\5\13\1\27\1\151\1\13"+
    "\1\152\4\13\1\40\1\13\1\153\2\1\1\65\1\13\1\154\1\155\2\13\1\156\1\13\1\77"+
    "\1\115\2\1\1\13\1\113\3\13\1\155\2\1\2\115\1\157\5\1\1\110\2\13\1\147\1\160"+
    "\1\115\2\1\1\161\1\13\1\162\1\42\2\13\1\40\1\1\2\13\1\147\1\1\1\163\1\42\1"+
    "\13\1\154\1\46\5\1\1\164\1\165\14\13\4\1\21\13\1\142\2\13\1\142\1\166\1\13"+
    "\1\154\3\13\1\167\1\170\1\171\1\125\1\170\1\172\1\1\1\173\2\1\1\174\1\1\1"+
    "\175\1\1\1\125\6\1\1\176\1\177\1\200\1\201\1\202\3\1\1\203\147\1\2\13\1\153"+
    "\2\13\1\153\10\13\1\204\1\205\2\13\1\134\3\13\1\206\1\1\1\13\1\113\4\207\4"+
    "\1\1\127\35\1\1\210\2\1\1\211\1\25\4\13\1\212\1\25\4\13\1\135\1\110\1\13\1"+
    "\154\1\25\4\13\1\153\1\1\1\13\1\30\3\1\1\13\40\1\133\13\1\40\4\1\135\13\1"+
    "\40\2\1\10\13\1\125\4\1\2\13\1\154\20\13\1\125\1\13\1\213\1\1\2\13\1\153\1"+
    "\127\1\13\1\154\4\13\1\40\2\1\1\214\1\215\5\13\1\216\1\13\1\153\1\27\3\1\1"+
    "\214\1\217\1\13\1\31\1\1\3\13\1\147\1\215\2\13\1\147\1\1\1\115\1\1\1\220\1"+
    "\42\1\13\1\40\1\13\1\113\1\1\1\13\1\125\1\50\2\13\1\31\1\127\1\115\1\221\1"+
    "\222\2\13\1\46\1\1\1\223\1\115\1\13\1\224\3\13\1\225\1\226\1\227\1\30\1\66"+
    "\1\230\1\231\1\207\2\13\1\135\1\40\7\13\1\31\1\115\72\13\1\147\1\13\1\232"+
    "\2\13\1\156\20\1\26\13\1\154\6\13\1\77\2\1\1\113\1\233\1\56\1\234\1\235\6"+
    "\13\1\16\1\1\1\161\25\13\1\154\1\1\4\13\1\215\2\13\1\27\2\1\1\156\7\1\1\221"+
    "\7\13\1\125\1\1\1\115\1\25\1\30\1\25\1\30\1\236\4\13\1\153\1\237\1\240\2\1"+
    "\1\241\1\13\1\14\1\242\2\154\2\1\7\13\1\30\30\1\1\13\1\125\3\13\1\71\2\1\2"+
    "\13\1\1\1\13\1\243\2\13\1\40\1\13\1\154\2\13\1\244\3\1\11\13\1\154\1\115\2"+
    "\13\1\244\1\13\1\156\2\13\1\27\3\13\1\147\11\1\23\13\1\113\1\13\1\40\1\27"+
    "\11\1\1\245\2\13\1\246\1\13\1\40\1\13\1\113\1\13\1\153\4\1\1\13\1\247\1\13"+
    "\1\40\1\13\1\77\4\1\3\13\1\250\4\1\1\71\1\251\1\13\1\147\2\1\1\13\1\125\1"+
    "\13\1\125\2\1\1\124\1\13\1\155\1\1\3\13\1\40\1\13\1\40\1\13\1\31\1\13\1\16"+
    "\6\1\4\13\1\46\3\1\3\13\1\31\3\13\1\31\60\1\1\161\2\13\1\27\2\1\1\65\1\1\1"+
    "\161\2\13\2\1\1\13\1\46\1\115\1\161\1\13\1\113\1\65\1\1\2\13\1\252\1\161\2"+
    "\13\1\31\1\253\1\254\2\1\1\13\1\22\1\156\5\1\1\255\1\256\1\46\2\13\1\153\1"+
    "\1\1\115\1\73\1\55\1\56\1\70\1\1\1\257\1\16\11\1\3\13\1\155\1\260\1\115\2"+
    "\1\3\13\1\1\1\261\1\115\12\1\2\13\1\153\2\1\1\262\2\1\3\13\1\1\1\263\1\115"+
    "\2\1\2\13\1\30\1\1\1\115\3\1\1\13\1\77\1\1\1\115\26\1\4\13\1\115\1\127\34"+
    "\1\3\13\1\46\20\1\1\56\1\13\1\153\1\1\1\71\1\115\1\1\1\215\1\13\67\1\71\13"+
    "\1\77\16\1\14\13\1\147\53\1\2\13\1\153\75\1\44\13\1\113\33\1\43\13\1\46\1"+
    "\13\1\153\1\115\6\1\1\13\1\154\1\1\3\13\1\1\1\147\1\115\1\161\1\264\1\13\67"+
    "\1\4\13\1\155\1\71\3\1\1\161\4\1\1\71\1\1\76\13\1\125\1\1\57\13\1\31\20\1"+
    "\1\16\77\1\6\13\1\30\1\125\1\46\1\77\66\1\5\13\1\221\3\13\1\146\1\265\1\266"+
    "\1\267\3\13\1\270\1\271\1\13\1\272\1\273\1\36\24\13\1\274\1\13\1\36\1\135"+
    "\1\13\1\135\1\13\1\221\1\13\1\221\1\153\1\13\1\153\1\13\1\56\1\13\1\56\1\13"+
    "\1\275\3\276\14\13\1\155\3\1\4\13\1\147\1\115\112\1\1\267\1\13\1\277\1\300"+
    "\1\301\1\302\1\303\1\304\1\305\1\156\1\306\1\156\24\1\55\13\1\113\2\1\103"+
    "\13\1\155\15\13\1\154\150\13\1\16\25\1\41\13\1\154\36\1");

  /* The ZZ_CMAP_A table has 3184 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\4\1\0\1\2\2\1\1\3\22\4\1\0\1\4\1\7\1\11\3\4\1\5\2\4\1\17\1\35\1\41\1\36"+
    "\1\20\1\16\1\42\1\32\6\31\2\14\1\51\2\4\1\34\2\4\1\46\6\33\24\15\1\37\1\6"+
    "\1\40\1\4\1\13\1\4\1\26\1\45\2\33\1\24\1\25\1\15\1\50\2\15\1\47\1\27\2\15"+
    "\1\44\2\15\1\22\1\30\1\21\1\23\2\15\1\43\2\15\1\52\1\4\1\53\7\4\1\1\12\4\1"+
    "\0\11\4\1\12\12\4\1\12\4\4\1\12\5\4\27\12\1\4\12\12\4\4\14\12\16\4\5\12\7"+
    "\4\1\12\1\4\1\12\1\4\5\12\1\4\2\12\2\4\4\12\1\4\1\12\6\4\1\12\1\4\3\12\1\4"+
    "\1\12\1\4\4\12\1\4\23\12\1\4\13\12\10\4\6\12\1\4\26\12\2\4\1\12\6\4\10\12"+
    "\10\4\13\12\5\4\3\12\15\4\12\10\4\4\6\12\1\4\1\12\17\4\2\12\7\4\2\12\12\10"+
    "\3\12\2\4\2\12\1\4\16\12\15\4\11\12\13\4\1\12\16\4\12\10\6\12\4\4\2\12\4\4"+
    "\1\12\5\4\6\12\4\4\1\12\11\4\1\12\3\4\1\12\7\4\11\12\7\4\5\12\1\4\10\12\6"+
    "\4\26\12\3\4\1\12\2\4\1\12\7\4\12\12\4\4\12\10\1\12\4\4\10\12\2\4\2\12\2\4"+
    "\26\12\1\4\7\12\1\4\1\12\3\4\4\12\3\4\1\12\20\4\1\12\15\4\2\12\1\4\1\12\5"+
    "\4\6\12\4\4\2\12\1\4\2\12\1\4\2\12\1\4\2\12\17\4\4\12\1\4\1\12\7\4\12\10\2"+
    "\4\3\12\20\4\11\12\1\4\2\12\1\4\2\12\1\4\5\12\3\4\1\12\2\4\1\12\30\4\1\12"+
    "\13\4\10\12\2\4\1\12\3\4\1\12\1\4\6\12\3\4\3\12\1\4\4\12\3\4\2\12\1\4\1\12"+
    "\1\4\2\12\3\4\2\12\3\4\3\12\3\4\14\12\13\4\10\12\1\4\2\12\10\4\3\12\5\4\1"+
    "\12\4\4\10\12\1\4\6\12\1\4\5\12\3\4\1\12\3\4\2\12\15\4\13\12\2\4\1\12\6\4"+
    "\3\12\10\4\1\12\12\4\6\12\5\4\22\12\3\4\10\12\1\4\11\12\1\4\1\12\2\4\7\12"+
    "\11\4\1\12\1\4\2\12\14\4\12\10\7\4\2\12\1\4\1\12\2\4\2\12\1\4\1\12\2\4\1\12"+
    "\6\4\4\12\1\4\7\12\1\4\3\12\1\4\1\12\1\4\1\12\2\4\2\12\1\4\4\12\1\4\2\12\11"+
    "\4\1\12\2\4\5\12\1\4\1\12\11\4\12\10\2\4\14\12\1\4\24\12\13\4\5\12\22\4\7"+
    "\12\4\4\4\12\3\4\1\12\3\4\2\12\7\4\3\12\4\4\15\12\14\4\1\12\1\4\6\12\1\4\1"+
    "\12\5\4\1\12\2\4\13\12\1\4\15\12\1\4\4\12\2\4\7\12\1\4\1\12\1\4\4\12\2\4\1"+
    "\12\1\4\4\12\2\4\7\12\1\4\1\12\1\4\4\12\2\4\16\12\2\4\6\12\2\4\15\12\2\4\1"+
    "\12\1\0\17\12\1\4\10\12\7\4\15\12\1\4\6\12\23\4\1\12\4\4\1\12\3\4\5\12\2\4"+
    "\22\12\1\4\1\12\5\4\17\12\1\4\16\12\2\4\5\12\13\4\14\12\13\4\1\12\15\4\7\12"+
    "\7\4\16\12\15\4\2\12\12\10\3\4\3\12\11\4\4\12\1\4\4\12\3\4\2\12\11\4\10\12"+
    "\1\4\1\12\1\4\1\12\1\4\1\12\1\4\6\12\1\4\7\12\1\4\1\12\3\4\3\12\1\4\7\12\3"+
    "\4\4\12\2\4\6\12\4\4\13\0\15\4\2\1\5\4\1\0\17\4\1\0\1\4\1\12\15\4\1\12\2\4"+
    "\1\12\4\4\1\12\2\4\12\12\1\4\1\12\3\4\5\12\6\4\1\12\1\4\1\12\1\4\1\12\1\4"+
    "\4\12\1\4\13\12\2\4\4\12\5\4\5\12\4\4\1\12\4\4\2\12\13\4\5\12\6\4\4\12\3\4"+
    "\2\12\14\4\10\12\7\4\10\12\1\4\7\12\1\4\1\0\4\4\2\12\12\4\5\12\5\4\2\12\3"+
    "\4\7\12\6\4\3\12\12\10\2\12\13\4\11\12\2\4\27\12\2\4\7\12\1\4\3\12\1\4\4\12"+
    "\1\4\4\12\2\4\6\12\3\4\1\12\1\4\1\12\2\4\5\12\1\4\12\12\12\10\5\12\1\4\3\12"+
    "\1\4\10\12\4\4\7\12\3\4\1\12\3\4\2\12\1\4\1\12\3\4\2\12\2\4\5\12\2\4\1\12"+
    "\1\4\1\12\30\4\3\12\3\4\6\12\2\4\6\12\2\4\6\12\11\4\7\12\4\4\5\12\3\4\5\12"+
    "\5\4\1\12\1\4\10\12\1\4\5\12\1\4\1\12\1\4\2\12\1\4\2\12\1\4\12\12\6\4\12\12"+
    "\2\4\6\12\2\4\6\12\2\4\6\12\2\4\3\12\3\4\14\12\1\4\16\12\1\4\2\12\1\4\2\12"+
    "\1\4\10\12\6\4\4\12\4\4\16\12\2\4\1\12\1\4\14\12\1\4\2\12\3\4\1\12\2\4\4\12"+
    "\1\4\2\12\12\4\10\12\6\4\6\12\1\4\3\12\1\4\12\12\3\4\1\12\12\4\4\12\13\4\12"+
    "\10\1\12\1\4\1\12\3\4\7\12\1\4\1\12\1\4\4\12\1\4\17\12\1\4\2\12\14\4\3\12"+
    "\7\4\4\12\11\4\2\12\1\4\1\12\20\4\4\12\10\4\1\12\13\4\10\12\5\4\3\12\2\4\1"+
    "\12\2\4\2\12\2\4\4\12\1\4\14\12\1\4\1\12\1\4\7\12\1\4\21\12\1\4\4\12\2\4\10"+
    "\12\1\4\7\12\1\4\14\12\1\4\4\12\1\4\5\12\1\4\1\12\3\4\14\12\2\4\13\12\1\4"+
    "\10\12\2\4\22\10\1\4\2\12\1\4\1\12\2\4\1\12\1\4\12\12\1\4\4\12\1\4\1\12\1"+
    "\4\1\12\6\4\1\12\4\4\1\12\1\4\1\12\1\4\1\12\1\4\3\12\1\4\2\12\1\4\1\12\2\4"+
    "\1\12\1\4\1\12\1\4\1\12\1\4\1\12\1\4\1\12\1\4\2\12\1\4\1\12\2\4\4\12\1\4\7"+
    "\12\1\4\4\12\1\4\4\12\1\4\1\12\1\4\12\12\1\4\5\12\1\4\3\12\1\4\5\12\1\4\5"+
    "\12");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\13\0\1\1\1\2\1\3\1\2\1\1\2\2\1\4"+
    "\1\5\1\6\1\7\1\10\2\6\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\4\2\2\1\17\1\20\2\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\0"+
    "\1\31\1\32\1\0\1\33\3\0\1\33\1\34\2\6"+
    "\1\35\1\36\1\37\1\0\1\40\1\41\1\33\5\0"+
    "\2\6\1\0\1\41\1\33\2\0\1\33\1\42\4\0"+
    "\2\43\1\0\1\44";

  private static int [] zzUnpackAction() {
    int [] result = new int[86];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\260\0\334\0\u0108\0\u0134"+
    "\0\u0160\0\u018c\0\u01b8\0\u01e4\0\u0210\0\u0210\0\u023c\0\u0268"+
    "\0\u0294\0\u02c0\0\u0210\0\u02ec\0\u0318\0\u0344\0\u0210\0\u0370"+
    "\0\u039c\0\u0210\0\u0210\0\u0210\0\u0210\0\u0210\0\u0210\0\u03c8"+
    "\0\u03f4\0\u0420\0\u0210\0\u0210\0\u0268\0\u044c\0\u0210\0\u0210"+
    "\0\u0210\0\u0478\0\u0160\0\u018c\0\u01b8\0\u04a4\0\u0210\0\u04d0"+
    "\0\u04fc\0\u0528\0\u0554\0\u0580\0\u05ac\0\u05d8\0\u0210\0\u0604"+
    "\0\u0630\0\u0210\0\u0210\0\u0210\0\u065c\0\u0210\0\u0688\0\u0210"+
    "\0\u06b4\0\u06e0\0\u070c\0\u0738\0\u0764\0\u0790\0\u07bc\0\u07e8"+
    "\0\u0210\0\u070c\0\u0814\0\u0840\0\u0764\0\u0318\0\u086c\0\u0898"+
    "\0\u08c4\0\u08f0\0\u0898\0\u08c4\0\u091c\0\u0210";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[86];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\4\14\5\15\1\16\4\15\1\17\35\15\4\20\1\15"+
    "\1\21\1\15\1\22\1\23\1\24\1\25\1\15\1\23"+
    "\1\25\1\15\1\26\1\27\1\30\3\25\1\31\3\25"+
    "\2\23\1\25\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\3\25\1\41\2\25\1\42\1\43\1\44\1\20"+
    "\2\45\1\46\1\15\1\21\1\15\1\22\1\23\1\24"+
    "\1\25\1\15\1\23\1\25\2\15\1\27\1\30\3\25"+
    "\1\31\3\25\2\23\1\25\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\3\25\1\41\2\25\1\42\1\43"+
    "\1\44\4\20\50\15\4\20\45\15\1\42\1\47\1\15"+
    "\4\20\1\15\1\21\1\15\1\22\1\23\1\24\1\25"+
    "\1\15\1\23\1\25\1\15\1\50\1\27\1\30\3\25"+
    "\1\31\3\25\2\23\1\25\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\3\25\1\41\2\25\1\42\1\43"+
    "\1\44\4\20\1\15\1\21\1\15\1\22\1\23\1\15"+
    "\1\25\1\15\1\23\1\25\2\15\1\27\1\30\3\25"+
    "\1\31\3\25\2\23\1\25\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\3\25\1\15\2\25\2\15\1\51"+
    "\12\0\1\52\2\0\1\52\3\0\10\52\2\0\1\52"+
    "\7\0\3\52\1\0\2\52\35\0\1\53\7\0\1\53"+
    "\42\0\2\54\7\0\1\54\21\0\1\55\3\0\1\55"+
    "\7\0\3\55\2\0\3\55\6\0\1\55\2\0\1\55"+
    "\6\0\4\14\12\0\1\56\127\0\1\57\1\60\34\0"+
    "\4\20\50\0\5\61\1\62\1\63\45\61\6\64\1\65"+
    "\1\66\44\64\1\24\3\0\50\24\13\0\3\25\2\0"+
    "\14\25\2\0\1\25\3\0\4\25\1\0\2\25\21\0"+
    "\1\67\50\0\3\25\2\0\2\25\1\70\11\25\2\0"+
    "\1\25\3\0\4\25\1\0\2\25\16\0\3\25\2\0"+
    "\6\25\1\71\5\25\2\0\1\25\3\0\4\25\1\0"+
    "\2\25\46\0\1\72\1\73\1\74\55\0\1\75\55\0"+
    "\1\76\2\0\2\20\1\45\1\20\63\0\3\52\3\0"+
    "\13\52\6\0\4\52\1\0\2\52\21\0\1\57\54\0"+
    "\1\77\34\0\5\61\1\100\1\101\45\61\5\0\1\102"+
    "\46\0\54\103\6\64\1\104\1\100\44\64\54\105\7\0"+
    "\1\102\57\0\3\25\2\0\3\25\1\106\10\25\2\0"+
    "\1\25\3\0\4\25\1\0\2\25\16\0\3\25\2\0"+
    "\7\25\1\107\4\25\2\0\1\25\3\0\4\25\1\0"+
    "\2\25\32\0\1\110\24\0\4\111\50\0\5\61\1\112"+
    "\1\101\45\61\1\102\1\0\3\102\1\113\1\102\1\114"+
    "\44\102\5\61\1\100\1\63\45\61\6\64\1\104\1\115"+
    "\52\64\1\65\1\100\44\64\13\0\3\25\2\0\4\25"+
    "\1\116\7\25\2\0\1\25\3\0\4\25\1\0\2\25"+
    "\16\0\3\25\2\0\10\25\1\106\3\25\2\0\1\25"+
    "\3\0\4\25\1\0\2\25\47\0\1\117\7\0\1\102"+
    "\1\0\3\102\1\120\1\102\1\114\45\102\1\0\3\102"+
    "\1\113\1\102\1\121\44\102\21\0\1\122\32\0\1\102"+
    "\1\0\3\102\1\123\1\102\1\114\45\102\1\0\3\102"+
    "\1\113\1\102\1\124\44\102\50\0\1\125\47\0\1\126"+
    "\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2376];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\13\0\1\1\2\11\4\1\1\11\3\1\1\11\2\1"+
    "\6\11\3\1\2\11\2\1\3\11\4\1\1\0\1\11"+
    "\1\1\1\0\1\1\3\0\1\1\1\11\2\1\3\11"+
    "\1\0\1\11\1\1\1\11\5\0\2\1\1\0\1\11"+
    "\1\1\2\0\2\1\4\0\2\1\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[86];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _KlothoLexer() {
    this((java.io.Reader)null);
  }

  private Stack<Integer> stack = new Stack<Integer>();

  public void yypushState(int newState) {
    stack.push(yystate());
    yybegin(newState);
  }

  public void yypopState() {
    yybegin(stack.pop());
  }

  public void yyswapState(int newState) {
      stack.pop();
      stack.push(newState);
      yybegin(newState);
    }

  public void yyresetState(int newState) {
      stack.clear();
      stack.push(newState);
      yybegin(newState);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _KlothoLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 37: break;
          case 2: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 38: break;
          case 3: 
            { yypushState(line_comment); return PY_COMMENT;
            } 
            // fall through
          case 39: break;
          case 4: 
            { return DIGIT;
            } 
            // fall through
          case 40: break;
          case 5: 
            { return TOML_COMMENT;
            } 
            // fall through
          case 41: break;
          case 6: 
            { return ID;
            } 
            // fall through
          case 42: break;
          case 7: 
            { yypushState(line_content); return STAR;
            } 
            // fall through
          case 43: break;
          case 8: 
            { return PERIOD;
            } 
            // fall through
          case 44: break;
          case 9: 
            { return EQ;
            } 
            // fall through
          case 45: break;
          case 10: 
            { return ADD;
            } 
            // fall through
          case 46: break;
          case 11: 
            { return SUB;
            } 
            // fall through
          case 47: break;
          case 12: 
            { return LEFT_BRACKET;
            } 
            // fall through
          case 48: break;
          case 13: 
            { return RIGHT_BRACKET;
            } 
            // fall through
          case 49: break;
          case 14: 
            { return COMMA;
            } 
            // fall through
          case 50: break;
          case 15: 
            { yypushState(inline_table); return LEFT_BRACE;
            } 
            // fall through
          case 51: break;
          case 16: 
            { switch (yystate()) { case line_content: inline_table: {  yypopState(); break;}} return RIGHT_BRACE;
            } 
            // fall through
          case 52: break;
          case 17: 
            { yyresetState(YYINITIAL); return WHITE_SPACE;
            } 
            // fall through
          case 53: break;
          case 18: 
            { yypopState(); return LEFT_BRACE;
            } 
            // fall through
          case 54: break;
          case 19: 
            { return STAR;
            } 
            // fall through
          case 55: break;
          case 20: 
            { yypopState(); return RIGHT_BRACE;
            } 
            // fall through
          case 56: break;
          case 21: 
            { yypopState(); return CAPABILITY;
            } 
            // fall through
          case 57: break;
          case 22: 
            { yypopState(); return DIG0_1;
            } 
            // fall through
          case 58: break;
          case 23: 
            { yypopState(); return DIG0_7;
            } 
            // fall through
          case 59: break;
          case 24: 
            { yypopState(); return HEX_DIG;
            } 
            // fall through
          case 60: break;
          case 25: 
            { yypushState(line_comment); return C_LINE_COMMENT;
            } 
            // fall through
          case 61: break;
          case 26: 
            { yypushState(multiline_comment); return MULTILINE_COMMENT_START;
            } 
            // fall through
          case 62: break;
          case 27: 
            { return STRING;
            } 
            // fall through
          case 63: break;
          case 28: 
            { yyresetState(YYINITIAL); return MULTILINE_COMMENT_END;
            } 
            // fall through
          case 64: break;
          case 29: 
            { yypushState(hex_number); return HEX_PREFIX;
            } 
            // fall through
          case 65: break;
          case 30: 
            { yypushState(oct_number); return OCT_PREFIX;
            } 
            // fall through
          case 66: break;
          case 31: 
            { yypushState(bin_number); return BIN_PREFIX;
            } 
            // fall through
          case 67: break;
          case 32: 
            { yypushState(capability_name); return SEPARATOR;
            } 
            // fall through
          case 68: break;
          case 33: 
            { yypushState(multiline_comment); return JSDOC_COMMENT_START;
            } 
            // fall through
          case 69: break;
          case 34: 
            { return BOOLEAN;
            } 
            // fall through
          case 70: break;
          case 35: 
            { return MULTILINE_STRING;
            } 
            // fall through
          case 71: break;
          case 36: 
            { yypushState(annotation_decl); return ANNOTATION;
            } 
            // fall through
          case 72: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
