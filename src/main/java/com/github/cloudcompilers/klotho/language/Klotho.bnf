{
  parserClass="com.github.cloudcompilers.klotho.language.psi.KlothoParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Klotho"
  psiImplClassSuffix="Impl"
  psiPackage="com.github.cloudcompilers.klotho.language.psi"
  psiImplPackage="com.github.cloudcompilers.klotho.language.psi.impl"

  elementTypeHolderClass="com.github.cloudcompilers.klotho.language.psi.KlothoTypes"
  elementTypeClass="com.github.cloudcompilers.klotho.language.KlothoElementType"
  tokenTypeClass="com.github.cloudcompilers.klotho.language.KlothoTokenType"

//  psiImplUtilClass="com.github.cloudcompilers.klotho.language.KlothoPsiImplUtil"

  tokens=[
    LEFT_BRACE='{'
    RIGHT_BRACE='}'
    space='regexp:\s+'
    EQ='='
    LEFT_BRACKET='['
    RIGHT_BRACKET=']'
    STAR='*'
    PERIOD='.'

    string="regexp:('(([^'][^']|[^'\\])|\\.)*'|\"(([^\"][^\"]|[^\"\\])|\\.)*\")"
    MULTILINE_STRING="regexp:('''|\"\"\")(.*?\r?\n?)*('''|\"\"\")"
    number='regexp:\d+\.?\d*'

    TOML_COMMENT='regexp:#.*\n'

    ANNOTATION='@klotho'
    SEPARATOR='::'

    ID='regexp:\p{Alpha}\w*'
    CAPABILITY // defined in lexer

    JSDOC_COMMENT_START='regexp:/\*\*\r?\n'
    MULTILINE_COMMENT_START='regexp:/\*(\r?\n|(\r\n)?)'
    MULTILINE_COMMENT_END='*/'
    C_LINE_COMMENT  = '//'
  ]
}

// see Grammar Kit: https://github.com/JetBrains/Grammar-Kit

root ::= (jsdoc_comment_block | c_style_comment_block | line_comment_block ) *

jsdoc_comment_block ::= JSDOC_COMMENT_START (star_prefix annotation_expr) + MULTILINE_COMMENT_END

c_style_comment_block ::= MULTILINE_COMMENT_START (star_prefix annotation_expr) + MULTILINE_COMMENT_END

line_comment_block ::= ('*'  annotation_expr +) | ('//'  annotation_expr +)

annotation_expr ::= '@klotho' '::' capability [ annotation_body ]

annotation_body ::= star_prefix '{' annotation_content star_prefix '}'

annotation_content ::=  [statement *]

statement ::= star_prefix (((assignment_expr | section_header) TOML_COMMENT) | TOML_COMMENT | any_expr)

private any_expr ::= assignment_expr | section_header | array

assignment_expr ::= key '=' value

star_prefix ::=  ('*' | '//' ) *

section_header ::= '[' header_id ']'

array ::= '[' ([(value ( [star_prefix] ',' [star_prefix] )) * [star_prefix] [value] !','] )  ']'

value ::= string | number | MULTILINE_STRING

key ::= ID

header_id ::= ID

// this just helps with the live preview
private capability ::= CAPABILITY | ID
