{
  parserClass="com.github.cloudcompilers.klotho.language.psi.KlothoParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Klotho"
  psiImplClassSuffix="Impl"
  psiPackage="com.github.cloudcompilers.klotho.language.psi"
  psiImplPackage="com.github.cloudcompilers.klotho.language.psi.impl"

  elementTypeHolderClass="com.github.cloudcompilers.klotho.language.psi.KlothoTypes"
  elementTypeClass="com.github.cloudcompilers.klotho.language.parsing.KlothoElementType"
  tokenTypeClass="com.github.cloudcompilers.klotho.language.parsing.KlothoTokenType"

//  psiImplUtilClass="com.github.cloudcompilers.klotho.language.KlothoPsiImplUtil"

  tokens=[
    EOL='\r\n'
    LEFT_BRACE='{'
    RIGHT_BRACE='}'
    space='regexp:\s+'
    EQ='='
    LEFT_BRACKET='['
    RIGHT_BRACKET=']'
    STAR='*'
    PERIOD='.'
    COMMA=','
    ADD='+'
    SUB='-'
    BOOLEAN='regexp:(true|false)'

    string="regexp:('(([^'][^']|[^'\\])|\\.)*'|\"(([^\"][^\"]|[^\"\\])|\\.)*\")"
    MULTILINE_STRING="regexp:('''|\"\"\")(.*?\r?\n?)*('''|\"\"\")"

    DIGIT = 'regexp:\d'
    HEX_PREFIX = '0x'
    OCT_PREFIX = '0o'
    BIN_PREFIX = '0b'

    DIG0_1 = 'regexp:[0-1]+'
    DIG0_7 = 'regexp:[0-7]+'
    HEX_DIG = 'regexp:[A-Fa-f]+'

    TOML_COMMENT='regexp:#.*'

    ANNOTATION='@klotho'
    SEPARATOR='::'

    ID='regexp:\p{Alpha}[\w-.]*'
    CAPABILITY='regexp:\p{Alpha}\w*'

    JSDOC_COMMENT_START='regexp:/\*\*\s?'
    MULTILINE_COMMENT_START='/*'
    MULTILINE_COMMENT_END='*/'
    C_LINE_COMMENT  = '//'
    PY_COMMENT = '#'
  ]
}

// see Grammar Kit: https://github.com/JetBrains/Grammar-Kit

Root ::= (JSDocCommentBlock | CStyleCommentBlock | LineComment) +

JSDocCommentBlock ::= JSDOC_COMMENT_START (StarPrefix AnnotationExpr) + MULTILINE_COMMENT_END

CStyleCommentBlock ::= MULTILINE_COMMENT_START (StarPrefix AnnotationExpr) + MULTILINE_COMMENT_END

LineComment ::= LineCommentPrefix AnnotationExpr

AnnotationExpr ::= '@klotho' '::' Capability [ AnnotationBody ] {pin=3}

AnnotationBody ::= StarPrefix '{' [EOL] AnnotationContent [EOL] StarPrefix '}' [EOL] {pin=2}

private AnnotationContent ::=  [Statement *]

Statement ::= StarPrefix ((AnyExpr [TOML_COMMENT]) | TOML_COMMENT)  [EOL]

private AnyExpr ::=  AssignmentExpr | SectionHeader

AssignmentExpr ::= Key '=' Value {pin=2}

private StarPrefix ::=  ('*' + | LineCommentPrefix) *

private LineCommentPrefix ::= '#' + | '//' +

SectionHeader ::= '[' HeaderId ']' {pin=1}

private Value ::= SimpleValue | Array | InlineTable

InlineTable ::= '{' [AssignmentExpr] (',' AssignmentExpr) * '}' {pin(".*")=1}

Array ::= '[' ([(Value ( [StarPrefix] ',' [StarPrefix] )) * [StarPrefix] [Value] !','] )  ']' {pin=2}

private SimpleValue ::=  Number | string | MULTILINE_STRING | BOOLEAN

Key ::= ID

HeaderId ::= ID

// this just helps with the live preview. the lexer distinguishes between capability and id
private Capability ::= CAPABILITY | ID

Number ::= PlainNumber | HexNumber | BinNumber | OctNumber

PlainNumber ::= ['-' | '+'] DIGIT + ['.' DIGIT *]  {pin=2}

OctNumber ::= OCT_PREFIX DIG0_7 {pin=1}

BinNumber ::= BIN_PREFIX DIG0_1 {pin=1}

HexNumber ::= HEX_PREFIX HEX_DIG {pin=1}
